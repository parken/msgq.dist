{"version":3,"sources":["components/setup/index.js"],"names":["init","log","IST","offset","utcOffset","TZ","concat","Math","abs","format","serveForm","values","err","req","res","captions","MYSQL_DB","MYSQL_USER","MYSQL_PASS","MYSQL_HOST","MYSQL_PORT","MYSQL_TZ","PORT","SERVER_USER","SERVER_USER_PASSWORD","SERVER_GROUP","numuricFields","timezones","send","toString","map","key","field","t","includes","setup","next","method","body","SERVER_IDENTIFIER","SERVER_NAME","SYSTEMD_FILE_NAME","conn","host","dialect","timezone","defaults","NODE_ENV","systemdFile","env","omit","reduce","nxt","authenticate","then","resolve","writeFileSync","end","catch","app","use","urlencoded","extended","json"],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport debug from 'debug';\nimport fs from 'fs-promise';\nimport moment from 'moment';\nimport Sequelize from 'sequelize';\nimport bodyParser from 'body-parser';\nimport { exec } from 'child_process';\n\nimport { setupCompleted, envFile, root } from '../../config/env';\n\nconst log = debug('components/setup');\nconst IST = '+05:30';\n\nconst offset = moment().utcOffset();\nconst TZ = ''.concat(offset < 0 ? '-' : '+', moment(''.concat(Math.abs(offset / 60), Math.abs(offset % 60) < 10 ? '0' : '', Math.abs(offset % 60)), \"hmm\").format('HH:mm'));\n\nfunction serveForm({ values = {}, err = '' } = {}) {\n  return (req, res) => {\n    const captions = {\n      MYSQL_DB: 'Database name',\n      MYSQL_USER: 'Database Username',\n      MYSQL_PASS: 'Database Password',\n      MYSQL_HOST: 'Database Host',\n      MYSQL_PORT: 'Database Port',\n      MYSQL_TZ: 'Timezone',\n      PORT: 'Application Port',\n      SERVER_USER: 'SSH User',\n      SERVER_USER_PASSWORD: 'SSH Password',\n      SERVER_GROUP: 'SSH User Group' };\n    const numuricFields = ['PORT'];\n    const timezones = [IST];\n\n    return res.send(`\n        <form\n          method=\"post\"\n          style=\"text-align: center; margin: auto; margin-top: 10%; width: 500px;\">\n        <h2>MSGQue</h2>\n        <p><a href=\"https://github.com/parken/msgque\" target=\"_blank\">Setup Instructions</a></p>\n        <p style=\"color:red\">${err.toString()}</p>\n         <br><br>\n          ${\n  Object.keys(captions)\n    .map((key) => {\n      const field = captions[key];\n      if (key === 'MYSQL_TZ') {\n        return `<br> <br> <br>\n                  ${field}:\n                  <select\n                    name=\"${key}\"\n                    value=\"${field ? `${field}` : ''}\">\n                    <option value=\"\">Select</option>\n                    ${\n  timezones.map(t =>\n    `<option ${TZ === t ? 'selected=\"true\"' : ''}\">${t}</option>`)\n}\n                    </select>\n                `;\n      }\n\n      return `<br>\n                  ${field}:\n                  <input\n                    type=\"${numuricFields.includes(field) ? 'number' : 'text'}\"\n                    name=\"${key}\"\n                    value=\"${values[key] ? `${values[key]}` : ''}\">\n                `;\n    })\n}\n          <br><br><br>\n          <input type=\"submit\">\n        </form>\n      `);\n  };\n}\n\nfunction setup() {\n  return (req, res, next) => {\n    if (setupCompleted) return next();\n    if (req.method === 'GET') return serveForm()(req, res, next);\n    const {\n      MYSQL_DB,\n      MYSQL_USER,\n      MYSQL_PASS,\n      MYSQL_HOST,\n      MYSQL_TZ,\n      PORT = 4500,\n      SERVER_IDENTIFIER = 'msgque',\n      SERVER_NAME = 'MSGQUE',\n      SERVER_USER = 'root',\n      SERVER_USER_PASSWORD = 'password',\n      SERVER_GROUP = 'wheel',\n    } = req.body;\n    const SYSTEMD_FILE_NAME = 'msgque.service';\n    const conn = new Sequelize(\n      MYSQL_DB, MYSQL_USER,\n      MYSQL_PASS, { host: MYSQL_HOST, dialect: 'mysql', timezone: MYSQL_TZ },\n    );\n    const defaults = {\n      MYSQL_HOST: 'localhost',\n      MYSQL_TZ: IST,\n      NODE_ENV: 'production',\n    };\n\n    const systemdFile = `\n[Unit]\nDescription=${SERVER_NAME}\nAfter=syslog.target\n\n[Service]\nWorkingDirectory=${root}\nExecStart=/usr/local/bin/node --inspect server/index\nExecReload=/usr/bin/kill -HUP $MAINPID\nRestart=always\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=${SERVER_IDENTIFIER}\nUser=${SERVER_USER}\nGroup=${SERVER_GROUP}\nEnvironmentFile=${root}/.env\n\n[Install]\nWantedBy=multi-user.target`;\n\n    const env = Object\n      .keys(Object.assign(defaults, _.omit(req.body, ['SERVER_USER_PASSWORD'])))\n      .reduce((nxt, key) => `${nxt}${key}=${req.body[key]}\\r\\n`, '');\n\n    return conn\n      .authenticate()\n      .then(() => new Promise((resolve) => {\n        fs.writeFileSync(envFile, env);\n        fs.writeFileSync(`${root}/${SYSTEMD_FILE_NAME}`, systemdFile);\n        exec(`chmod u+x ${root}/after-setup.sh`);\n        exec(`echo ${SERVER_USER_PASSWORD} | sudo -S ${root}/scripts/setup.sh ${\n          SYSTEMD_FILE_NAME} ${SERVER_IDENTIFIER} ${SERVER_IDENTIFIER} ${PORT}`, () => resolve());\n      }))\n      .then(() => {\n        res.end(`\n        <html>\n          <head><meta http-equiv=\"refresh\" content=\"10;url=/\"></head>\n          <body>\n            <h3> MSGQue Getting Ready for you...</h3>\n            <p> writing <span style=\"color:red\">.env</span> file with database settings</p>\n            <p> Restarting server.\n              <p>for successful restart, Systemd, Upstart Process Management required.\n              If you not using Systemd or PM2. Please start manually</p>\n            </p>\n\n            <p> <a href=\"https://github.com/parken/msgque\" target=\"_blank\">Learn more</a></p>\n          </body>\n        </html>`);\n      })\n      .catch(err => serveForm({ values: req.body, err })(req, res, next));\n  };\n}\n\nexport function init(app) {\n  if (!setupCompleted) {\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.use(bodyParser.json());\n    app.use(setup());\n  }\n}\n\n"]}