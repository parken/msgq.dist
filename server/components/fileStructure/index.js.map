{"version":3,"sources":["components/fileStructure/index.js"],"names":["log","existsSync","mkdirSync","fileStructure","isFolder","filePath","statAsync","then","stat","resolve","isDirectory","readdirAsync","reject","readdir","err","list","processQueue","dirList","fileList","length","dir","shift","all","map","file","data","forEach","x","index","push","catch","writeFile","path","substr","lastIndexOf","removeFile","unlink","readFile","type","getUserHome","process","env","platform","fileCount","makeDirectory","dirSteps","split","tempDir","moveFolder","from","to","showError","mkdirp","moveFile"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport mv from 'mv';\nimport debug from 'debug';\n\nimport { root } from '../../config/environment';\n\nconst log = debug('fileStructure');\n\nif (!fs.existsSync(`${root}/websites`)) fs.mkdirSync(`${root}/websites`);\n\nconst fileStructure = {};\nfunction isFolder(filePath) {\n  return new Promise(resolve => fileStructure.statAsync(filePath)\n    .then((stat) => resolve(stat && stat.isDirectory())));\n}\n\nfunction readdirAsync(filePath) {\n  return new Promise((resolve, reject) => {\n    fs.readdir(filePath, (err, list) => {\n      if (err) return reject();\n      return resolve(list);\n    });\n  });\n}\n\nfunction processQueue(dirList) {\n  const fileList = [];\n  return new Promise((resolve, reject) => {\n    if (dirList.length) {\n      const dir = dirList.shift();\n      return readdirAsync(dir)\n        .then(list => Promise\n          .all(list.map(file => isFolder(`${dir}\\\\${file}`)))\n          .then((data) => {\n            data.forEach((x, index) => {\n              if (x) dirList.push(`${dir}\\\\${list[index]}`);\n              else fileList.push(`${dir}\\\\${list[index]}`);\n            });\n            return processQueue(dirList);\n          })\n          .then(data => {\n            fileList.push(...data);\n            return resolve(fileList);\n          }))\n        .catch(err => reject(err));\n    }\n    return resolve(fileList);\n  });\n}\n\nObject.assign(fileStructure, {\n  writeFile(path, data) {\n    return new Promise((resolve, reject) => {\n      const dir = `${root}${path.substr(0, path.lastIndexOf('/'))}`;\n      if (!fs.existsSync(dir)) fs.mkdirSync(dir);\n      fs.writeFile(`${root}${path}`, data, (err) => {\n        if (err) return reject(err);\n        return resolve(path);\n      });\n    });\n  },\n  removeFile(path) {\n    return Promise.resolve(fs.unlink(path));\n  },\n  readFile(path, type = 'utf-8') {\n    return new Promise((resolve, reject) => {\n      fs.readFile(`${root}${path}`, type, (err, data) => {\n        if (err) reject(path);\n        resolve(data);\n      });\n    });\n  },\n  getUserHome() {\n    return process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\n  },\n  statAsync(filePath) {\n    return new Promise((resolve, reject) =>\n      fs.stat(`${root}${filePath}`, (err, stat) => {\n        if (err) return reject(err);\n        return resolve(stat);\n      }));\n  },\n  fileList(filePath) {\n    return processQueue([`${root}${filePath}`]);\n  },\n  fileCount(filePath) {\n    return this.fileList(`${root}${filePath}`).then(data => data.length);\n  },\n  makeDirectory(dir) {\n    const dirSteps = dir.split('\\\\');\n    let tempDir = dirSteps.shift();\n    dirSteps.forEach(x => {\n      tempDir += `\\\\${x}`;\n      if (!fs.existsSync(tempDir)) {\n        fs.mkdirSync(tempDir);\n      }\n    });\n  },\n  moveFolder(from, to, { showError = true } = {}) {\n    return new Promise((resolve, reject) =>\n      mv(from, to, { mkdirp: true }, err => ((err && showError) ? reject(err) : resolve(to))));\n  },\n  moveFile(from, to, { showError = true } = {}) {\n    return new Promise((resolve, reject) =>\n      mv(from, to, err => ((err && showError) ? reject(err) : resolve(to))));\n  },\n});\n\nexport default fileStructure;\n"]}