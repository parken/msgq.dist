{"version":3,"sources":["components/oauth/sequelize/session.model.js"],"names":["module","exports","SessionModel","sequelize","DataTypes","Session","define","id","type","INTEGER","autoIncrement","primaryKey","allowNull","unique","device","STRING","os","browser","country","region","city","ip","latitude","longitude","metro","zip","tableName","timestamps","classMethods","associate","db","hasMany","AccessToken","foreignKey","AuthCode","RefreshToken","belongsTo","User","logout","where","sessionId","destroy","then","all","update","expires","Date"],"mappings":";;;;;;;;AAEAA,OAAOC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,SAAtB,EAAiCC,SAAjC,EAA4C;AAC3D,MAAMC,UAAUF,UAAUG,MAAV,CAAiB,SAAjB,EAA4B;AAC1CC,QAAI;AACFC,YAAMJ,UAAUK,OAAV,CAAkB,EAAlB,CADJ;AAEFC,qBAAe,IAFb;AAGFC,kBAAY,IAHV;AAIFC,iBAAW,KAJT;AAKFC,cAAQ;AALN,KADsC;AAQ1CC,YAAQV,UAAUW,MARwB;AAS1CC,QAAIZ,UAAUW,MAT4B;AAU1CE,aAASb,UAAUW,MAVuB;AAW1CG,aAASd,UAAUW,MAXuB;AAY1CI,YAAQf,UAAUW,MAZwB;AAa1CK,UAAMhB,UAAUW,MAb0B;AAc1CM,QAAIjB,UAAUW,MAd4B;AAe1CO,cAAUlB,UAAUW,MAfsB;AAgB1CQ,eAAWnB,UAAUW,MAhBqB;AAiB1CS,WAAOpB,UAAUW,MAjByB;AAkB1CU,SAAKrB,UAAUW;AAlB2B,GAA5B,EAmBb;AACDW,eAAW,UADV;AAEDC,gBAAY,IAFX;;AAIDC,kBAAc;AACZC,eADY,qBACFC,EADE,EACE;AACZzB,gBAAQ0B,OAAR,CAAgBD,GAAGE,WAAnB,EAAgC;AAC9BC,sBAAY;AADkB,SAAhC;;AAIA5B,gBAAQ0B,OAAR,CAAgBD,GAAGI,QAAnB,EAA6B;AAC3BD,sBAAY;AADe,SAA7B;;AAIA5B,gBAAQ0B,OAAR,CAAgBD,GAAGK,YAAnB,EAAiC;AAC/BF,sBAAY;AADmB,SAAjC;;AAIA5B,gBAAQ+B,SAAR,CAAkBN,GAAGO,IAArB,EAA2B;AACzBJ,sBAAY;AADa,SAA3B;AAGD,OAjBW;AAkBZK,YAlBY,wBAkB0B/B,EAlB1B,EAkB8B;AAAA,YAAjCyB,WAAiC,QAAjCA,WAAiC;AAAA,YAApBG,YAAoB,QAApBA,YAAoB;;AACxC,YAAMI,QAAQ,EAAEA,OAAO,EAAEC,WAAWjC,EAAb,EAAT,EAAd;AACA,eAAOF,QACJoC,OADI,CACI,EAAEF,OAAO,EAAEhC,MAAF,EAAT,EADJ,EAEJmC,IAFI,CAEC;AAAA,iBAAM,kBAAQC,GAAR,CAAY,CACtBR,aAAaS,MAAb,CAAoB,EAAEC,SAAS,IAAIC,IAAJ,EAAX,EAApB,EAA6CP,KAA7C,CADsB,EAEtBP,YAAYY,MAAZ,CAAmB,EAAEC,SAAS,IAAIC,IAAJ,EAAX,EAAnB,EAA4CP,KAA5C,CAFsB,CAAZ,CAAN;AAAA,SAFD,CAAP;AAMD;AA1BW;AAJb,GAnBa,CAAhB;;AAqDA,SAAOlC,OAAP;AACD,CAvDD","file":"session.model.js","sourcesContent":["\n\nmodule.exports = function SessionModel(sequelize, DataTypes) {\n  const Session = sequelize.define('Session', {\n    id: {\n      type: DataTypes.INTEGER(14),\n      autoIncrement: true,\n      primaryKey: true,\n      allowNull: false,\n      unique: true,\n    },\n    device: DataTypes.STRING,\n    os: DataTypes.STRING,\n    browser: DataTypes.STRING,\n    country: DataTypes.STRING,\n    region: DataTypes.STRING,\n    city: DataTypes.STRING,\n    ip: DataTypes.STRING,\n    latitude: DataTypes.STRING,\n    longitude: DataTypes.STRING,\n    metro: DataTypes.STRING,\n    zip: DataTypes.STRING,\n  }, {\n    tableName: 'sessions',\n    timestamps: true,\n\n    classMethods: {\n      associate(db) {\n        Session.hasMany(db.AccessToken, {\n          foreignKey: 'sessionId',\n        });\n\n        Session.hasMany(db.AuthCode, {\n          foreignKey: 'sessionId',\n        });\n\n        Session.hasMany(db.RefreshToken, {\n          foreignKey: 'sessionId',\n        });\n\n        Session.belongsTo(db.User, {\n          foreignKey: 'userId',\n        });\n      },\n      logout({ AccessToken, RefreshToken }, id) {\n        const where = { where: { sessionId: id } };\n        return Session\n          .destroy({ where: { id } })\n          .then(() => Promise.all([\n            RefreshToken.update({ expires: new Date() }, where),\n            AccessToken.update({ expires: new Date() }, where),\n          ]));\n      },\n    },\n  });\n\n  return Session;\n};\n"]}