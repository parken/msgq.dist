{"version":3,"sources":["components/oauth/auth.js"],"names":["req","res","next","authorization","get","query","token","tokenAuthentication","toLowerCase","startsWith","split","authorise","logout","r","LoginIdentifier","find","where","uuid","include","model","User","attributes","then","data","user","status","json","code","error","error_description","RefreshToken","refreshToken","body","raw","s","sessionId","Session","resolve","catch"],"mappings":";;;;;;;;;;kBAgCe,UAAUA,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACvC,MAAMC,gBAAgBH,IAAII,GAAJ,CAAQ,eAAR,CAAtB;AACA,MAAIJ,IAAIK,KAAJ,CAAUC,KAAd,EAAqB;AACnB,WAAOC,oBAAoBP,IAAIK,KAAJ,CAAUC,KAA9B,EAAqCN,GAArC,EAA0CC,GAA1C,EAA+CC,IAA/C,CAAP;AACD,GAFD,MAEO,IAAIC,iBAAiBA,cAAcK,WAAd,GAA4BC,UAA5B,CAAuC,OAAvC,CAArB,EAAsE;AAC3E,WAAOF,oBAAoBJ,cAAcK,WAAd,GAA4BE,KAA5B,CAAkC,QAAlC,EAA4C,CAA5C,CAApB,EAAoEV,GAApE,EAAyEC,GAAzE,EAA8EC,IAA9E,CAAP;AACD;AACD,SAAO,gBAAMS,SAAN,GAAkBX,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,CAAP;AACD,C;;QAEeU,M,GAAAA,M;;AA1ChB;;;;AACA;;;;;;AAEA,SAASL,mBAAT,CAA6BD,KAA7B,EAAoCO,CAApC,EAAuCZ,GAAvC,EAA4CC,IAA5C,EAAkD;AAChD,MAAMF,MAAMa,CAAZ;AACA,SAAO,gBAAGC,eAAH,CACJC,IADI,CACC;AACJC,WAAO,EAAEC,MAAMX,KAAR,EADH;AAEJY,aAAS,CAAC;AACRC,aAAO,gBAAGC,IADF;AAERC,kBAAY,CACV,IADU,EACJ,MADI,EACI,QADJ,EACc,OADd,EACuB,YADvB,EACqC,6BADrC,EAEV,6BAFU,EAEqB,2BAFrB,EAEkD,2BAFlD,EAGV,wBAHU,EAGgB,wBAHhB,EAG0C,mBAH1C,EAIV,mBAJU;AAFJ,KAAD;AAFL,GADD,EAaJC,IAbI,CAaC,gBAAQ;AAAA,eACWC,QAAQ,EADnB;AAAA,QACEC,IADF,QACJJ,IADI;;AAEZ,QAAI,CAACI,IAAL,EAAW;AACT,aAAOvB,IAAIwB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,cAAM,GADoB;AAE1BC,eAAO,iBAFmB;AAG1BC,2BAAmB;AAHO,OAArB,CAAP;AAKD;AACD7B,QAAIwB,IAAJ,GAAWA,IAAX;AACA,WAAOtB,MAAP;AACD,GAxBI,CAAP;AAyBD;;AAYM,SAASU,MAAT,CAAgBZ,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,kBAAG4B,YAAH,CACGf,IADH,CACQ;AACJM,gBAAY,CAAC,WAAD,CADR;AAEJL,WAAO;AACLe,oBAAc/B,IAAIgC,IAAJ,CAAS1B;AADlB,KAFH;AAKJ2B,SAAK;AALD,GADR,EAQGX,IARH,CAQQ;AAAA,WAAMY,KAAKA,EAAEC,SAAP,GAAmB,gBAAGC,OAAH,CAAWxB,MAAX,kBAAsBsB,EAAEC,SAAxB,CAAnB,GAAwD,kBAAQE,OAAR,EAA9D;AAAA,GARR,EASGf,IATH,CASQ;AAAA,WAAKrB,IAAIyB,IAAJ,CAASQ,CAAT,CAAL;AAAA,GATR,EAUGI,KAVH,CAUSpC,IAVT;AAWD","file":"auth.js","sourcesContent":["import db from '../../conn/sqldb';\nimport oauth from './index';\n\nfunction tokenAuthentication(token, r, res, next) {\n  const req = r;\n  return db.LoginIdentifier\n    .find({\n      where: { uuid: token },\n      include: [{\n        model: db.User,\n        attributes: [\n          'id', 'name', 'roleId', 'admin', 'resellerId', 'sellingBalanceTransactional',\n          'sendingBalanceTransactional', 'sellingBalancePromotional', 'sendingBalancePromotional',\n          'sellingBalanceSenderId', 'sendingBalanceSenderId', 'sellingBalanceOTP',\n          'sendingBalanceOTP',\n        ],\n      }],\n    })\n    .then(data => {\n      const { User: user } = data || {};\n      if (!user) {\n        return res.status(400).json({\n          code: 400,\n          error: 'invalid_request',\n          error_description: 'The access token was not found',\n        });\n      }\n      req.user = user;\n      return next();\n    });\n}\n\nexport default function (req, res, next) {\n  const authorization = req.get('Authorization');\n  if (req.query.token) {\n    return tokenAuthentication(req.query.token, req, res, next);\n  } else if (authorization && authorization.toLowerCase().startsWith('token')) {\n    return tokenAuthentication(authorization.toLowerCase().split('token ')[1], req, res, next);\n  }\n  return oauth.authorise()(req, res, next);\n}\n\nexport function logout(req, res, next) {\n  db.RefreshToken\n    .find({\n      attributes: ['sessionId'],\n      where: {\n        refreshToken: req.body.token,\n      },\n      raw: true,\n    })\n    .then(s => (s && s.sessionId ? db.Session.logout(db, s.sessionId) : Promise.resolve()))\n    .then(s => res.json(s))\n    .catch(next);\n}\n"]}