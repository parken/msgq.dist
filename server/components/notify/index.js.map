{"version":3,"sources":["components/notify/index.js"],"names":["slack","sms","notifyOnUserChannel","log","api","RestAPI","authId","PLIVO_AUTH_ID","authToken","PLIVO_AUTH_TOKEN","sendMessage","params","res","rej","send_message","status","response","text","uri","options","a","URLS_SLACK","form","post","err","error","smsMap","setInterval","from","to","resolve","message","Number","reject","src","dst","url","MSG","catch","userId","t","all","User","find","attributes","where","id","LoginIdentifier","findOrCreate","defaults","uuid","then","user","loginIdentifier","match","content","split","includes","slackActive","slackUrl","smsActive","mobile"],"mappings":"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","file":"index.js","sourcesContent":["\nimport debug from 'debug';\nimport plivo from 'plivo';\nimport request from 'request';\nimport uuidV1 from 'uuid/v1';\nimport db from '../../conn/sqldb';\n\nimport logger from '../logger';\nimport config from '../../config/environment';\n\nconst log = debug('components/notify');\n\n/* eslint new-cap:0 */\nconst api = plivo.RestAPI({\n  authId: config.PLIVO_AUTH_ID,\n  authToken: config.PLIVO_AUTH_TOKEN,\n});\n\napi.sendMessage = (params) => {\n  log('sendMessage', params);\n  return new Promise((res, rej) => {\n    api.send_message(params, (status, response) => {\n      if (status >= 400) return rej({ status, response });\n      return res({ status, response });\n    });\n  });\n};\n\nexport function slack(text, uri) {\n  const options = {\n    uri: uri || config.a.URLS_SLACK,\n    form: JSON.stringify({ text: text || 'Someone sending blank notification sharath...' }),\n  };\n  request.post(options, err => (err ? logger.error('slack', err) : 1));\n}\n\nlet smsMap = {};\n\nsetInterval(() => {\n  smsMap = {};\n}, 5 * 60 * 1000);\n\nexport function sms({ from = '919844717202', to, text }) {\n  smsMap[to] = (smsMap[to] || 0) + 1;\n  if (smsMap[to] > 5) {\n    slack(`rate limit: ${from}:${text}`);\n    return Promise.resolve({ message: 'MSG Blocked due to rate limit' });\n  }\n  if (!to && !Number(to)) return Promise.reject({ message: 'to required' });\n  const params = {\n    src: from,\n    dst: to,\n    text,\n    url: 'http://requestb.in/umecebum',\n  };\n  if (config.MSG === 'true') {\n    log('plivo', params);\n    return api.sendMessage(params).catch((err) => {\n      logger.error('plivo', err);\n      return err;\n    });\n  }\n  log('sms', params);\n  return Promise.resolve({ message: 'Enable MSG in ENV' });\n}\n\nexport function notifyOnUserChannel({ userId, text: t }) {\n  let text = t;\n  return Promise.all([\n    db.User.find({\n      attributes: ['id', 'slackUrl', 'mobile', 'slackActive', 'smsActive'],\n      where: { id: userId },\n    }),\n    db.LoginIdentifier.findOrCreate({ where: { userId }, defaults: { uuid: uuidV1() } }),\n  ])\n    .then(([user, [loginIdentifier]]) => {\n      // eslint-disable-next-line max-len\n      const url = text.match(/(http|ftp|https):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?/gm);\n      if (url) {\n        const content = text.split(url);\n        text = `${content[0]}${url}${url.includes('?') ? '&' : '?'}uuid=${loginIdentifier.uuid\n        }${content[1]}`;\n      }\n      log(text);\n      if (user.slackActive && user.slackUrl) slack(text, user.slackUrl);\n      if (user.smsActive) sms({ to: user.mobile, text });\n    });\n}\n"]}