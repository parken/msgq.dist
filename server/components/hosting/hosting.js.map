{"version":3,"sources":["components/hosting/hosting.js"],"names":["register","deploy","generateWebsite","domain","config","region","res","rej","s3site","err","website","options","index","error","uploadDir","s3","S3","accessKeyId","secretAccessKey","putObject","Bucket","Key","ACL","Body","ContentType","option","writeFile","deleteDomain","deleteObjects","Delete","Objects","deleteBucket","data"],"mappings":";;;;;;;;;;;;;;QAMgBA,Q,GAAAA,Q;QAYAC,M,GAAAA,M;QA6BAC,e,GAAAA,e;;AA/ChB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,SAASF,QAAT,CAAkBG,MAAlB,EAA0B;AAC/B,MAAMC,SAAS;AACbC,YAAQ,cADK;AAEbF;AAFa,GAAf;;AAKA,SAAO,sBAAY,UAACG,GAAD,EAAMC,GAAN;AAAA,WAAc,oBAAUC,MAAV,CAAiBJ,MAAjB,EAAyB,UAACK,GAAD,EAAMC,OAAN,EAAkB;AAC1E,UAAID,GAAJ,EAAS,OAAOF,IAAIE,GAAJ,CAAP;AACT,aAAOH,IAAII,OAAJ,CAAP;AACD,KAHgC,CAAd;AAAA,GAAZ,CAAP;AAID;;AAEM,SAAST,MAAT,CAAgBE,MAAhB,EAAwB;AAC7B,MAAMQ,UAAU,EAAER,cAAF,EAAhB;AACA,SAAO,sBAAY,UAACG,GAAD,EAAMC,GAAN;AAAA,WAAc,oBAAUC,MAAV,CAAiB,sBAAcG,OAAd,EAAuB;AACvEN,cAAQ,cAD+D,EAC/C;AACxBO,aAAO,YAFgE;AAGvEC,aAAO,YAHgE;AAIvEC,oDAA+BX,MAJwC;AAKvEF,cAAQ;AAL+D,KAAvB,CAAjB,EAM7B,UAACQ,GAAD,EAAMC,OAAN,EAAkB;AACpB,UAAID,GAAJ,EAAS,OAAOF,IAAIE,GAAJ,CAAP;AACT,UAAMM,KAAK,IAAI,iBAAIC,EAAR,CAAW;AACpBC,mDADoB;AAEpBC,2DAFoB;AAGpBb,gBAAQ;AAHY,OAAX,CAAX;AAKA;AACA,aAAOU,GAAGI,SAAH,CAAa;AAClBC,gBAAQjB,MADU;AAElBkB,aAAK,YAFa;AAGlBC,aAAK,aAHa;AAIlBC,uBAAapB,MAAb,UAJkB;AAKlBqB,qBAAa;AALK,OAAb,EAMJ,iBAAS;AACV,yBAAOX,KAAP,CAAa,cAAb,EAA6BH,OAA7B,EAAsCG,KAAtC;AACA,eAAOP,IAAII,OAAJ,CAAP;AACD,OATM,CAAP;AAUD,KAxBgC,CAAd;AAAA,GAAZ,CAAP;AAyBD;;AAEM,SAASR,eAAT,CAAyBC,MAAzB,EAAiCsB,MAAjC,EAAyC;AAC9C,SAAO,wBAAcC,SAAd,gBAAqCvB,MAArC,kBAA0DsB,MAA1D,CAAP;AACD;;AAED,SAASE,YAAT,CAAuBxB,MAAvB,EAA+B;AAC7B,MAAMY,KAAK,IAAI,iBAAIC,EAAR,CAAW;AACpBX,YAAQ,cADY;AAEpBY,+CAFoB;AAGpBC;AAHoB,GAAX,CAAX;;AAMA,SAAO,sBAAY,UAACZ,GAAD,EAAMC,GAAN;AAAA,WAAcQ,GAAGa,aAAH,CAAiB;AAChDR,cAAQjB,MADwC;AAEhD0B,cAAQ;AACNC,iBAAS,CAAC,EAAET,KAAK,YAAP,EAAD;AADH;AAFwC,KAAjB,EAK9B,eAAO;AACR,UAAIZ,GAAJ,EAAS,OAAOF,IAAIE,GAAJ,CAAP;AACTM,SAAGgB,YAAH,CAAgB,EAAEX,QAAQjB,MAAV,EAAhB,EAAoC,UAACU,KAAD,EAAQmB,IAAR,EAAiB;AACnD,YAAIvB,GAAJ,EAAS,OAAOF,IAAIM,KAAJ,CAAP;AACT,eAAOP,IAAI0B,IAAJ,CAAP;AACD,OAHD;AAID,KAXgC,CAAd;AAAA,GAAZ,CAAP;AAYD;;kBAEc;AACbhC,oBADa;AAEbC,gBAFa;AAGbC,kCAHa;AAIbyB;AAJa,C","file":"hosting.js","sourcesContent":["import s3website from 's3-website';\nimport AWS from 'aws-sdk';\nimport FileStructure from '../fileStructure';\nimport logger from '../../components/logger';\nimport { root, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY } from '../../config/environment';\n\nexport function register(domain) {\n  const config = {\n    region: 'eu-central-1',\n    domain,\n  }\n\n  return new Promise((res, rej) => s3website.s3site(config, (err, website) => {\n    if (err) return rej(err);\n    return res(website);\n  }));\n}\n\nexport function deploy(domain) {\n  const options = { domain };\n  return new Promise((res, rej) => s3website.s3site(Object.assign(options, {\n    region: 'eu-central-1', // optional, default: us-east-1\n    index: 'index.html',\n    error: 'index.html',\n    uploadDir: `${root}/websites/${domain}`,\n    deploy: true,\n  }), (err, website) => {\n    if (err) return rej(err);\n    const s3 = new AWS.S3({\n      accessKeyId: AWS_ACCESS_KEY_ID,\n      secretAccessKey: AWS_SECRET_ACCESS_KEY,\n      region: 'eu-central-1',\n    });\n    // check if website works\n    return s3.putObject({\n      Bucket: domain,\n      Key: 'index.html',\n      ACL: 'public-read',\n      Body: `<h1>${domain}</h1>`,\n      ContentType: 'text/html',\n    }, error => {\n      logger.error('s3.putObject', website, error);\n      return res(website);\n    });\n  }));\n}\n\nexport function generateWebsite(domain, option) {\n  return FileStructure.writeFile(`/websites/${domain}/index.html`, option);\n}\n\nfunction deleteDomain (domain) {\n  const s3 = new AWS.S3({\n    region: 'eu-central-1',\n    accessKeyId: AWS_ACCESS_KEY_ID,\n    secretAccessKey: AWS_SECRET_ACCESS_KEY,\n  })\n\n  return new Promise((res, rej) => s3.deleteObjects({\n    Bucket: domain,\n    Delete: {\n      Objects: [{ Key: 'index.html' }],\n    },\n  }, err => {\n    if (err) return rej(err);\n    s3.deleteBucket({ Bucket: domain }, (error, data) => {\n      if (err) return rej(error);\n      return res(data);\n    });\n  }));\n}\n\nexport default {\n  register,\n  deploy,\n  generateWebsite,\n  deleteDomain,\n};\n"]}