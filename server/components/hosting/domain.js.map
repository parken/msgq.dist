{"version":3,"sources":["components/hosting/domain.js"],"names":["searchDomains","register","customerPrice","reset","deleteCname","createCNAME","apiurl","resellerid","apikey","cache","q","method","uri","query","tlds","json","then","domainsMap","map","name","key","price","classkey","addnewdomain","domain","endsWith","resolve","message","body","years","ns","data","type","priority","port","ttl","weight","headers","Authorization"],"mappings":"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","file":"domain.js","sourcesContent":["\nimport rp from 'request-promise';\nimport { RESELLER_ID, RESELLER_API_KEY, DO_TOKEN } from '../../config/environment';\nconst apiurl = 'https://httpapi.com';\nconst resellerid = RESELLER_ID;\nconst apikey = RESELLER_API_KEY;\n\nlet cache = {};\n\nexport function searchDomains(q) {\n  return rp({\n    method: 'GET',\n    uri: `${apiurl}/api/domains/available.json`,\n    query: {\n      'auth-userid': resellerid,\n      'api-key': apikey,\n      'domain-name': q,\n      tlds: 'com',\n    },\n    json: true,\n  }).then(domainsMap => Object\n    .keys(domainsMap)\n    .map(key => Object\n      .assign({\n        name: key,\n        price: cache.customerPrice[domainsMap[key].classkey].addnewdomain[1],\n      }, domainsMap[key])));\n}\n\nexport function register(domain){\n  if (domain.endsWith('91.co')) return Promise.resolve({ message: 'registration success' });\n\n  // if not 91.co register from resellerclub\n  return rp({\n    method: 'POST',\n    uri: `${apiurl}/api/domains/api/domains/register.json`,\n    body: {\n      'auth-userid': resellerid,\n      'api-key': apikey,\n      'domain-name': domain,\n      years: '1',\n      ns: ['ns1.digitalocean.com', 'ns2.digitalocean.com'],\n      'customer-id': '382718é€Ÿ-contact-id=2558879',\n      'admin-contact-id': '17420190', // yog27ray\n      'tech-contact-id': '17420190', // yog27ray\n      'billing-contact-id': '17420190', // yog27ray\n      'invoice-option': 'KeepInvoice',\n      'protect-privacy': false,\n    },\n    json: true,\n  });\n}\n\n// need to whitelist ip from https://manage.resellerclub.com/\nexport function customerPrice() {\n  if (cache.customerPrice) return cache.customerPrice;\n  return rp({\n    method: 'GET',\n    uri: `${apiurl}/api/products/customer-price.json`,\n    query: {\n      'auth-userid': resellerid,\n      'api-key': apikey,\n    },\n    json: true,\n  }).then((data) => {\n    cache.customerPrice = data;\n    return data;\n  });\n}\n\nexport function reset() {\n  cache = {};\n}\n\nexport function deleteCname(domain) {\n  // https://api.digitalocean.com/v2/domains/example.com/records/3352896\n  // need to store id when cname created, then only deletion possible\n  return Promise.resolve();\n}\n\n// call for password\nexport function createCNAME(domain = 'w91.co', {\n  name = 'yog27ray',\n  // url got from\n  data = 'yog27ray.w91.co.s3-website.ap-south-1.amazonaws.com',\n}) {\n  return rp({\n    method: 'POST',\n    uri: `https://api.digitalocean.com/v2/domains/${domain}/records`,\n    body: {\n      type: 'CNAME',\n      name,\n      data,\n      priority: null,\n      port: null,\n      ttl: 1800,\n      weight: null,\n    },\n    headers: {\n      Authorization: `Bearer ${DO_TOKEN}`,\n    },\n    json: true,\n  });\n}\n\nexport default {\n  searchDomains,\n  register,\n  customerPrice,\n  reset,\n  createCNAME,\n};\n"]}