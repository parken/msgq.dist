{"version":3,"sources":["components/smsManager/index.js"],"names":["log","SmsManager","messageFly","queue","processing","processItem","list","reject","length","resolve","upstreamId","routeId","SenderId","senderId","id","SenderIdName","name","MessageFly","messageFlyId","text","Upstream","find","where","then","messages","newList","forEach","x","push","data","JSON","parse","upstream","default","routeMap","parameter","split","key","map","number","join","joinKey","method","uri","link","qs","json","Message","update","messageStatusId","comment","body","operatorOn","catch","processOperatorSelection","findAll","Sequelize","literal","balance","$gt","upstreams","upstreamMessageMap","i","splice","sequelize","transaction","promises","messageIdAllocated","build","decrement","Transaction","create","count","transactionStatusId","all","commit","include","transactions","err","rollback","processUserMessages","shift","userId","startQueue","addToSmsQueue","includes","addPendingMessagesToQueue","attributes","send","createdAt","$lte","subtract","error","createBulkMessages","campaignId","unicode","flash","scheduledOn","bulkCreate","addToScheduler","messageTextId","packageTypeId","messageTypeId","ScheduleMessage","canSendSms","resellerId","message","User","users","every","u","balanceField","roleId","code","sendSms","user","campaign","numbers","groupIds","GroupContact","groupId","Number","model","Contact","substring","Campaign","findOrCreate","getSenderId","senderIdObj","toJSON","senderIdStatusId","total"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,MAAM,qBAAM,uBAAN,CAAZ;;AAEA,IAAMC,aAAa;AACjBC,cAAY,EAAEC,OAAO,EAAT,EAAaC,YAAY,KAAzB,EADK;AAEjBC,aAFiB,6BAEqB;AAAA,QAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,2BAAlBC,MAAkB;AAAA,QAAlBA,MAAkB,+BAAT,KAAS;;AACpC,QAAI,CAACD,KAAKE,MAAV,EAAkB,OAAO,kBAAQC,OAAR,EAAP;AADkB,iBAOhCH,KAAK,CAAL,CAPgC;AAAA,QAGlCI,UAHkC,UAGlCA,UAHkC;AAAA,QAIlCC,OAJkC,UAIlCA,OAJkC;AAAA,iCAKlCC,QALkC;AAAA,QAKlBC,QALkB,mBAKtBC,EALsB;AAAA,QAKFC,YALE,mBAKRC,IALQ;AAAA,mCAMlCC,UANkC;AAAA,QAMhBC,YANgB,qBAMpBJ,EANoB;AAAA,QAMFK,IANE,qBAMFA,IANE;;AAQpC,WAAO,gBAAGC,QAAH,CACJC,IADI,CACC,EAAEC,OAAO,EAAER,IAAIJ,UAAN,EAAT,EADD,EAEJa,IAFI,CAEC,oBAAY;AAChB,UAAMC,WAAW,EAAjB;AACA,UAAMC,UAAU,EAAhB;AACAnB,WAAKoB,OAAL,CAAa,aAAK;AAChB,YAAIC,EAAEjB,UAAF,KAAiBA,UAAjB,IAA+BiB,EAAEhB,OAAF,KAAcA,OAA7C,IAAwDgB,EAAEd,QAAF,KAAeA,QAAvE,IACCc,EAAET,YAAF,KAAmBA,YADxB,EACsC;AACpC,iBAAOM,SAASI,IAAT,CAAcD,CAAd,CAAP;AACD;AACD,eAAOF,QAAQG,IAAR,CAAaD,CAAb,CAAP;AACD,OAND;AAOA,UAAME,OAAOC,KAAKC,KAAL,CAAWC,SAASC,OAApB,CAAb;AACA,UAAMC,WAAWJ,KAAKC,KAAL,CAAWC,SAASE,QAApB,CAAjB;AACAF,eAASG,SAAT,CAAmBC,KAAnB,CAAyB,GAAzB,EAA8BV,OAA9B,CAAsC,eAAO;AAC3C,gBAAQW,GAAR;AACE,eAAK,MAAL;AAAa;AACXR,mBAAKQ,GAAL,IAAYH,SAASvB,OAAT,CAAZ;AACA;AACD;AACD,eAAK,IAAL;AAAW;AACTkB,mBAAKQ,GAAL,IAAYb,SAASc,GAAT,CAAa;AAAA,uBAAKX,EAAEY,MAAP;AAAA,eAAb,EAA4BC,IAA5B,CAAiCR,SAASS,OAA1C,CAAZ;AACA;AACD;AACD,eAAK,MAAL;AAAa;AACXZ,mBAAKQ,GAAL,IAAYtB,YAAZ;AACA;AACD;AACD,eAAK,MAAL;AAAa;AACXc,mBAAKQ,GAAL,IAAYlB,IAAZ;AACA;AACD;AACD,eAAK,SAAL;AAAgB;AACdU,mBAAKQ,GAAL,4EAAkFnB,YAAlF;AACA;AACD;AACD;AArBF;AAuBD,OAxBD;AAyBA,aAAO,8BAAG;AACRwB,gBAAQ,KADA;AAERC,aAAKX,SAASY,IAFN;AAGRC,YAAIhB,IAHI;AAIRiB,cAAM;AAJE,OAAH,EAKJvB,IALI,CAKC;AAAA,eAAQ,gBAAGwB,OAAH,CACbC,MADa,CACN,EAAEC,iBAAiB,CAAnB,EAAsBC,SAASC,IAA/B,EAAqCC,YAAY,uBAAjD,EADM,EACuD;AACnE9B,iBAAO,EAAER,IAAIU,SAASc,GAAT,CAAa;AAAA,qBAAKX,EAAEb,EAAP;AAAA,aAAb,CAAN;AAD4D,SADvD,CAAR;AAAA,OALD,EASJS,IATI,CASC;AAAA,eAAMtB,WAAWI,WAAX,CAAuB,EAAEC,MAAMmB,OAAR,EAAiBlB,cAAjB,EAAvB,CAAN;AAAA,OATD,EAUJ8C,KAVI,CAUE;AAAA,eAAMpD,WAAWI,WAAX,CAAuB,EAAEC,MAAMmB,OAAR,EAAiBlB,QAAQ,IAAzB,EAAvB,CAAN;AAAA,OAVF,CAAP;AAWD,KAlDI,CAAP;AAmDD,GA7DgB;AA8DjB+C,0BA9DiB,2CA8DkB;AAAA,QAARhD,IAAQ,SAARA,IAAQ;;AACjC,QAAI,CAACA,KAAKE,MAAV,EAAkB,OAAO,kBAAQC,OAAR,EAAP;AADe,kBAECH,KAAK,CAAL,CAFD;AAAA,QAEzBK,OAFyB,WAEzBA,OAFyB;AAAA,QAEhBO,YAFgB,WAEhBA,YAFgB;;AAGjC,WAAO,gBAAGE,QAAH,CACJmC,OADI,CACI,EAAEjC,OAAO;AAChBX,iBAAS,gBAAG6C,SAAH,CAAaC,OAAb,oBAAqC9C,OAArC,sBADO;AAEhB+C,iBAAS,EAAEC,KAAK,CAAP;AAFO,OAAT,EADJ,EAKJpC,IALI,CAKC,UAACqC,SAAD,EAAe;AACnB,UAAMC,qBAAqB,EAA3B;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,UAAUpD,MAA9B,EAAsCsD,KAAK,CAA3C,EAA8C;AAC5C,YAAM9B,WAAW4B,UAAUE,CAAV,CAAjB;AACA,YAAI9B,SAAS0B,OAAT,IAAoBpD,KAAKE,MAA7B,EAAqC;AACnCqD,6BAAmB7B,SAASlB,EAA5B,IAAkCR,KAAKyD,MAAL,CAAY,CAAZ,EAAezD,KAAKE,MAApB,CAAlC;AACA;AACD;AACDqD,2BAAmB7B,SAASlB,EAA5B,IAAkCR,KAAKyD,MAAL,CAAY,CAAZ,EAAe/B,SAAS0B,OAAxB,CAAlC;AACD;AACDG,yBAAmB,CAAnB,IAAwBvD,IAAxB;AACA,aAAO,gBAAG0D,SAAH,CAAaC,WAAb,GACJ1C,IADI,CACC,UAAC0C,WAAD,EAAiB;AACrB,YAAMC,WAAW,CACfL,mBAAmB,CAAnB,EAAsBrD,MAAtB,GACI,gBAAGuC,OAAH,CAAWC,MAAX,CACA,EAAEC,iBAAiB,CAAnB,EADA,EAEA,EAAE3B,OAAO,EAAER,IAAI+C,mBAAmB,CAAnB,EAAsBvB,GAAtB,CAA0B;AAAA,qBAAKX,EAAEb,EAAP;AAAA,aAA1B,CAAN,EAAT,EAFA,EAGA,EAAEmD,wBAAF,EAHA,CADJ,GAKI,kBAAQxD,OAAR,EANW,CAAjB;AAQA,eAAOoD,mBAAmB,CAAnB,CAAP;AACA,YAAMM,qBAAqB,EAA3B;AACAD,iBAAStC,IAAT,kDAAiB,oBAAYiC,kBAAZ,EAAgCvB,GAAhC,CAAoC,UAAC5B,UAAD,EAAgB;AACnE,cAAMI,KAAK+C,mBAAmBnD,UAAnB,EAA+B4B,GAA/B,CAAmC;AAAA,mBAAKX,EAAEb,EAAP;AAAA,WAAnC,CAAX;AACAqD,6BAAmBvC,IAAnB,4DAA2Bd,EAA3B;AACA,cAAMkB,WAAW,gBAAGZ,QAAH,CAAYgD,KAAZ,CAAkB,EAAEtD,IAAIJ,UAAN,EAAlB,CAAjB;AACA,iBAAO,gBAAGqC,OAAH,CAAWC,MAAX,CACL,EAAEC,iBAAiB,CAAnB,EAAsBvC,sBAAtB,EADK,EAEL,EAAEY,OAAO,EAAER,MAAF,EAAT,EAFK,EAEc,EAAEmD,wBAAF,EAFd,EAGJ1C,IAHI,CAGC;AAAA,mBAAMS,SAASqC,SAAT,CAAmB,EAAEX,SAAS5C,GAAGN,MAAd,EAAnB,EAA2C,EAAEyD,wBAAF,EAA3C,CAAN;AAAA,WAHD,EAIJ1C,IAJI,CAIC;AAAA,mBAAM,gBAAG+C,WAAH,CAAeC,MAAf,CACV;AACE7D,oCADF;AAEEQ,wCAFF;AAGEsD,qBAAOX,mBAAmBnD,UAAnB,EAA+B4B,GAA/B,CAAmC;AAAA,uBAAKX,EAAEb,EAAP;AAAA,eAAnC,EAA8CN,MAHvD;AAIEiE,mCAAqB;AAJvB,aADU,EAMP,EAAER,wBAAF,EANO,CAAN;AAAA,WAJD,CAAP;AAWD,SAfgB,CAAjB;AAgBA,eAAO,kBACJS,GADI,CACAR,QADA,EAEJ3C,IAFI,CAEC,UAACM,IAAD,EAAU;AACdoC,sBAAYU,MAAZ;AACA,iBAAO,gBAAG5B,OAAH,CAAWQ,OAAX,CAAmB;AACxBjC,mBAAO,EAAER,IAAIqD,kBAAN,EADiB;AAExBS,qBAAS,CAAC,gBAAGxD,QAAJ,EAAc,gBAAGH,UAAjB,EAA6B,gBAAGL,QAAhC;AAFe,WAAnB,EAGJW,IAHI,CAGC;AAAA,mBAAYtB,WAAWI,WAAX,CAAuB,EAAEC,MAAMkB,QAAR,EAAvB,CAAZ;AAAA,WAHD,EAIJD,IAJI,CAIC;AAAA,mBAAM,kBAAQd,OAAR,CAAgBoB,KAAKkC,MAAL,CAAY,CAAZ,EAAelC,KAAKrB,MAApB,CAAhB,CAAN;AAAA,WAJD,CAAP;AAKD,SATI,EAUJe,IAVI,CAUC;AAAA,iBAAgB,gBAAG+C,WAAH,CAAetB,MAAf,CACpB,EAAEyB,qBAAqB,CAAvB,EADoB,EAEpB,EAAEnD,OAAO,EAAER,IAAI+D,aAAavC,GAAb,CAAiB;AAAA,uBAAKX,EAAEb,EAAP;AAAA,eAAjB,CAAN,EAAT,EAFoB,CAAhB;AAAA,SAVD,EAaJuC,KAbI,CAaE,UAACyB,GAAD,EAAS;AACdb,sBAAYc,QAAZ;AACA,iBAAO,kBAAQxE,MAAR,CAAeuE,GAAf,CAAP;AACD,SAhBI,CAAP;AAiBD,OA7CI,CAAP;AA8CD,KA9DI,CAAP;AA+DD,GAhIgB;AAiIjBE,qBAjIiB,iCAiIK;AACpB,QAAI/E,WAAWC,UAAX,CAAsBE,UAA1B,EAAsC,OAAO,kBAAQK,OAAR,EAAP;;AADlB,iBAEoB,CAACR,WAAWC,UAAX,CAAsBC,KAAtB,CAA4B8E,KAA5B,MAAuC,EAAxC,EAA4C7C,KAA5C,CAAkD,GAAlD,CAFpB;AAAA;AAAA,QAEblB,YAFa;AAAA,QAECgE,MAFD;AAAA,QAESvE,OAFT;;AAGpB,QAAIO,YAAJ,EAAkB;AAChBjB,iBAAWC,UAAX,CAAsBE,UAAtB,GAAmC,IAAnC;AACA,aAAO,gBAAG2C,OAAH,CACJQ,OADI,CACI;AACPjC,eAAO,EAAE4D,cAAF,EAAUvE,gBAAV,EAAmBO,0BAAnB;AADA,OADJ,EAIJK,IAJI,CAIC;AAAA,eAAQtB,WAAWqD,wBAAX,CAAoC,EAAEhD,UAAF,EAApC,CAAR;AAAA,OAJD,EAKJiB,IALI,CAKC,YAAM;AACVtB,mBAAWC,UAAX,CAAsBE,UAAtB,GAAmC,KAAnC;AACAH,mBAAW+E,mBAAX;AACD,OARI,EASJ3B,KATI,CASE,YAAM;AACXpD,mBAAWC,UAAX,CAAsBE,UAAtB,GAAmC,KAAnC;AACA,eAAOH,WAAW+E,mBAAX,EAAP;AACD,OAZI,CAAP;AAaD;AACD,WAAO,kBAAQvE,OAAR,EAAP;AACD,GArJgB;AAsJjB0E,YAtJiB,wBAsJJ;AACX,QAAI,CAAClF,WAAWC,UAAX,CAAsBE,UAA3B,EAAuCH,WAAW+E,mBAAX;AACvC,WAAO,kBAAQvE,OAAR,EAAP;AACD,GAzJgB;AA0JjB2E,eA1JiB,yBA0JH5D,QA1JG,EA0JO;AACtBA,aAASE,OAAT,CAAiB;AAAA,aAAMzB,WAAWC,UAAX,CAAsBC,KAAtB,CACpBkF,QADoB,CACR1D,EAAET,YADM,SACUS,EAAEuD,MADZ,SACsBvD,EAAEhB,OADxB,IAEnB,EAFmB,GAGnBV,WAAWC,UAAX,CAAsBC,KAAtB,CAA4ByB,IAA5B,CAAoCD,EAAET,YAAtC,SAAsDS,EAAEuD,MAAxD,SAAkEvD,EAAEhB,OAApE,CAHa;AAAA,KAAjB;AAIA,WAAOV,WAAWkF,UAAX,EAAP;AACD,GAhKgB;AAiKjBG,2BAjKiB,uCAiKW;AAC1B,WAAO,kBAAQZ,GAAR,CAAY,CACjB,gBAAG3B,OAAH,CAAWQ,OAAX,CAAmB;AACjBgC,kBAAY,CAAC,cAAD,EAAiB,SAAjB,EAA4B,QAA5B,CADK;AAEjBjE,aAAO;AACL2B,yBAAiB,CAAC,CAAD,CADZ;AAELuC,cAAM,CAFD;AAGLC,mBAAW,EAAEC,MAAM,wBAASC,QAAT,CAAkB,EAAlB,EAAsB,QAAtB,CAAR;AAHN;AAFU,KAAnB,EAOGpE,IAPH,CAOQ;AAAA,aAAYtB,WAAWmF,aAAX,CAAyB5D,QAAzB,CAAZ;AAAA,KAPR,CADiB,EASjB,gBAAG8C,WAAH,CAAef,OAAf,CAAuB;AACrBjC,aAAO,EAAEmD,qBAAqB,CAAvB,EAA0BgB,WAAW,EAAEC,MAAM,wBAASC,QAAT,CAAkB,EAAlB,EAAsB,QAAtB,CAAR,EAArC;AADc,KAAvB,EAEGpE,IAFH,CAEQ,UAACsD,YAAD,EAAkB;AACxB,UAAI,CAACA,aAAarE,MAAlB,EAA0B,OAAO,kBAAQC,OAAR,EAAP;AAC1B,aAAO,gBAAGsC,OAAH,CAAWQ,OAAX,CAAmB;AACxBjC,eAAO;AACL2B,2BAAiB,CADZ;AAEL/B,wBAAc2D,aAAavC,GAAb,CAAiB;AAAA,mBAAKX,EAAET,YAAP;AAAA,WAAjB,CAFT;AAGLsE,gBAAM,CAHD;AAILC,qBAAW,EAAEC,MAAM,wBAASC,QAAT,CAAkB,EAAlB,EAAsB,QAAtB,CAAR;AAJN,SADiB;AAOxBf,iBAAS,CAAC,gBAAGxD,QAAJ,EAAc,gBAAGH,UAAjB,EAA6B,gBAAGL,QAAhC;AAPe,OAAnB,EAQJW,IARI,CAQC;AAAA,eAAYtB,WAAWI,WAAX,CAAuB,EAAEC,MAAMkB,QAAR,EAAvB,CAAZ;AAAA,OARD,EASJD,IATI,CASC;AAAA,eAAM,gBAAG+C,WAAH,CAAetB,MAAf,CACV,EAAEyB,qBAAqB,CAAvB,EADU,EAEV,EAAEnD,OAAO,EAAER,IAAI+D,aAAavC,GAAb,CAAiB;AAAA,qBAAKX,EAAEb,EAAP;AAAA,aAAjB,CAAN,EAAT,EAFU,CAAN;AAAA,OATD,CAAP;AAYD,KAhBD,CATiB,CAAZ,EA0BJuC,KA1BI,CA0BE;AAAA,aAAO,iBAAOuC,KAAP,CAAa,2BAAb,EAA0Cd,GAA1C,CAAP;AAAA,KA1BF,CAAP;AA2BD,GA7LgB;AA8LjBe,oBA9LiB,qCA+La;AAAA,QADTvF,IACS,SADTA,IACS;AAAA,QADHY,YACG,SADHA,YACG;AAAA,QADWgE,MACX,SADWA,MACX;AAAA,QADmBrE,QACnB,SADmBA,QACnB;AAAA,QAD6BF,OAC7B,SAD6BA,OAC7B;AAAA,QADsCmF,UACtC,SADsCA,UACtC;AAAA,QADkDC,OAClD,SADkDA,OAClD;AAAA,QAA5BC,KAA4B,SAA5BA,KAA4B;AAAA,QAArBC,WAAqB,SAArBA,WAAqB;AAAA,QAART,IAAQ,SAARA,IAAQ;;AAC5B,WAAO,gBAAGzC,OAAH,CAAWmD,UAAX,CAAsB5F,KAAKgC,GAAL,CAAS;AAAA,aAAW,EAAEC,cAAF;AAC/CrB,kCAD+C;AAE/C+B,yBAAiB,CAF8B;AAG/CiC,sBAH+C;AAI/CrE,0BAJ+C;AAK/CF,wBAL+C;AAM/CmF,8BAN+C;AAO/CE,oBAP+C;AAQ/CC,gCAR+C;AAS/CT,kBAT+C;AAU/CO;AAV+C,OAAX;AAAA,KAAT,CAAtB,EAWFxE,IAXE,CAWG;AAAA,aAAaiE,OAAOvF,WAAWmF,aAAX,CAAyB5D,QAAzB,CAAP,GAA4C,kBAAQf,OAAR,EAAzD;AAAA,KAXH,CAAP;AAYD,GA5MgB;;AA6MjB;;;;AAIA0F,gBAjNiB,iCAkND;AAAA,QADC7F,IACD,SADCA,IACD;AAAA,QADO8F,aACP,SADOA,aACP;AAAA,QADsBlB,MACtB,SADsBA,MACtB;AAAA,QAD8BrE,QAC9B,SAD8BA,QAC9B;AAAA,QADwCwF,aACxC,SADwCA,aACxC;AAAA,QADuDC,aACvD,SADuDA,aACvD;AAAA,QADsEL,WACtE,SADsEA,WACtE;AAAA,QAAdH,UAAc,SAAdA,UAAc;;AACd,WAAO,gBAAGS,eAAH,CAAmBL,UAAnB,CAA8B5F,KAAKgC,GAAL,CAAS;AAAA,aAAW;AACvD4C,sBADuD;AAEvD3C,sBAFuD;AAGvD6D,oCAHuD;AAIvDC,oCAJuD;AAKvDxF,0BALuD;AAMvDyF,oCANuD;AAOvDL,gCAPuD;AAQvDhD,yBAAiB,CARsC;AASvD6C;AATuD,OAAX;AAAA,KAAT,CAA9B,CAAP;AAWD,GA9NgB;AA+NjBU,YA/NiB,6BA+NkC;AAAA,QAAtCtB,MAAsC,SAAtCA,MAAsC;AAAA,QAA9BuB,UAA8B,SAA9BA,UAA8B;AAAA,QAAlB9F,OAAkB,SAAlBA,OAAkB;AAAA,QAAT6D,KAAS,SAATA,KAAS;;AACjD,QAAI,CAACU,MAAD,IAAW,CAACvE,OAAhB,EAAyB;AACvB,aAAO,kBAAQJ,MAAR,CAAe,EAAEmG,SAAS,0BAAX,EAAf,CAAP;AACD;AACD,QAAM5F,KAAK,CAACoE,MAAD,CAAX;AACA,QAAIuB,UAAJ,EAAgB3F,GAAGc,IAAH,CAAQ6E,UAAR;AAChB,WAAO,gBAAGE,IAAH,CACJpD,OADI,CACI;AACPjC,aAAO,EAAER,MAAF,EADA;AAEPyE,kBAAY,CAAC,IAAD,EAAO,QAAP,qBAAkC,0BAAa5E,OAAb,CAAlC,qBACO,0BAAaA,OAAb,CADP,CAFL,EADJ,EAKJY,IALI,CAKC,UAACqF,KAAD,EAAW;AACf,UAAIA,MAAMC,KAAN,CAAY,UAACC,CAAD,EAAO;AACrB,YAAMC,gBAAkBD,EAAEE,MAAF,KAAa,CAAb,GAAiB,SAAjB,GAA6B,SAA/C,gBACI,0BAAarG,OAAb,CADV;AAEA,eAAOmG,EAAEC,YAAF,KAAmBvC,KAA1B;AACD,OAJG,CAAJ,EAII;AACF,eAAO,kBAAQ/D,OAAR,EAAP;AACD;AACD,aAAO,kBAAQF,MAAR,CAAe,EAAEmG,SAAS,gBAAX,EAA6BO,MAAM,GAAnC,EAAf,CAAP;AACD,KAdI,CAAP;AAeD,GApPgB;;AAqPjB;;;;;;;;;;;;;AAaAC,SAlQiB,0BAmQA;AAAA,QADP/F,IACO,SADPA,IACO;AAAA,QADDgG,IACC,SADDA,IACC;AAAA,QADKxG,OACL,SADKA,OACL;AAAA,QADcyG,QACd,SADcA,QACd;AAAA,QADwBC,OACxB,SADwBA,OACxB;AAAA,QADiCC,QACjC,SADiCA,QACjC;AAAA,QAD2CvB,OAC3C,SAD2CA,OAC3C;AAAA,QADoDC,KACpD,SADoDA,KACpD;AAAA,QAD2DnF,QAC3D,SAD2DA,QAC3D;AAAA,QAAfoF,WAAe,SAAfA,WAAe;;AACf,QAAI,CAAC9E,IAAD,IAAS,CAACgG,IAAd,EAAoB,OAAO,kBAAQ5G,MAAR,CAAe,EAAEmG,SAAS,kBAAX,EAAf,CAAP;AADL,QAEHxB,MAFG,GAEoBiC,IAFpB,CAEPrG,EAFO;AAAA,QAEK2F,UAFL,GAEoBU,IAFpB,CAEKV,UAFL;;AAGf,WAAO,kBAAQ/B,GAAR,CAAY,CAChB4C,WACG,gBAAGC,YAAH,CAAgBhE,OAAhB,CAAwB;AACxBjC,aAAO,EAAEkG,SAASC,OAAOH,QAAP,IAAmBG,OAAOH,QAAP,CAAnB,GAAsCA,SAASlF,KAAT,CAAe,GAAf,EAAoBE,GAApB,CAAwBmF,MAAxB,CAAjD,EADiB;AAExB7C,eAAS,CAAC,EAAEW,YAAY,CAAC,QAAD,CAAd,EAA0BmC,OAAO,gBAAGC,OAApC,EAAD;AAFe,KAAxB,EAGCpG,IAHD,CAGM;AAAA,aAAQM,KAAKS,GAAL,CAAS;AAAA,eAAKX,EAAEgG,OAAF,CAAUpF,MAAV,CAAiBqF,SAAjB,CAA2BjG,EAAEgG,OAAF,CAAUpF,MAAV,CAAiB/B,MAAjB,GAA0B,EAArD,CAAL;AAAA,OAAT,CAAR;AAAA,KAHN,CADH,GAKG,kBAAQC,OAAR,CAAgB,EAAhB,CANa,EAOhB2G,WACG,gBAAGS,QAAH,CAAYC,YAAZ,CAAyB,EAAExG,OAAO,EAAEN,MAAMoG,QAAR,EAAkBlC,QAAQiC,KAAKrG,EAA/B,EAAT,EAAzB,EACCS,IADD,CACM;AAAA;AAAA,UAAEI,CAAF;;AAAA,aAASA,EAAEb,EAAX;AAAA,KADN,CADH,GAGG,kBAAQL,OAAR,EAVa,EAWjB,mBAASsH,WAAT,CAAqBlH,QAArB,EAA+BsG,KAAKrG,EAApC,CAXiB,CAAZ,EAaJS,IAbI,CAaC,iBAAqC;AAAA;AAAA,UAAnCjB,IAAmC;AAAA,UAA7BwF,UAA6B;AAAA,UAAjBkC,WAAiB;;AAAA,gCACRA,YAAYC,MAAZ,EADQ;AAAA,UACjCnH,EADiC,uBACjCA,EADiC;AAAA,UAC7BoH,gBAD6B,uBAC7BA,gBAD6B;;AAEzC,UAAIb,OAAJ,EAAa/G,KAAKsB,IAAL,8CAAayF,QAAQjF,KAAR,CAAc,GAAd,CAAb;AACb,UAAI8F,qBAAqB,CAAzB,EAA4B;AAC1B,eAAO,kBAAQ3H,MAAR,CAAe,EAAEmG,SAAS,qBAAX,EAAkCO,MAAM,GAAxC,EAAf,CAAP;AACD;AACD,UAAMzB,OAAO0C,qBAAqB,CAAlC;AACA,aAAOjI,WAAWuG,UAAX,CAAsB,EAAEtB,cAAF,EAAUuB,sBAAV,EAAsB9F,gBAAtB,EAA+B6D,OAAOlE,KAAKE,MAA3C,EAAtB,EACJe,IADI,CACC;AAAA,eAAM,gBAAGN,UAAH,CAAcsD,MAAd,CAAqB,EAAEpD,UAAF;AAC/BkG,0BAD+B;AAE/BC,4BAF+B;AAG/Ba,iBAAO7H,KAAKE,MAHmB;AAI/BuF,0BAJ+B;AAK/BC,sBAL+B;AAM/Bd,wBAN+B;AAO/Be,kCAP+B;AAQ/BH,gCAR+B;AAS/BnF,0BAT+B;AAU/BE,oBAAUC,EAVqB;AAW/B0E,oBAX+B,EAArB,CAAN;AAAA,OADD,EAaJjE,IAbI,CAaC;AAAA,eAActB,WACjB4F,kBADiB,CACE,EAAEvF,UAAF;AAClBY,wBAAchB,WAAWY,EADP;AAElBoE,kBAAQiC,KAAKrG,EAFK;AAGlBD,oBAAUC,EAHQ;AAIlBH,0BAJkB;AAKlBmF,gCALkB;AAMlBC,0BANkB;AAOlBC,sBAPkB;AAQlBC,kCARkB;AASlBT;AATkB,SADF,CAAd;AAAA,OAbD,CAAP;AAyBD,KA7CI,CAAP;AA8CD;AApTgB,CAAnB;;kBAuTevF,U","file":"index.js","sourcesContent":["import debug from 'debug';\nimport moment from 'moment';\nimport rp from 'request-promise';\n\nimport db from '../../conn/sqldb';\nimport SenderId from '../../components/senderId';\nimport logger from '../../components/logger';\nimport { getRouteType } from '../../conn/sqldb/helper';\n\nconst log = debug('components/smsManager');\n\nconst SmsManager = {\n  messageFly: { queue: [], processing: false },\n  processItem({ list, reject = false }) {\n    if (!list.length) return Promise.resolve();\n    const {\n      upstreamId,\n      routeId,\n      SenderId: { id: senderId, name: SenderIdName },\n      MessageFly: { id: messageFlyId, text },\n    } = list[0];\n    return db.Upstream\n      .find({ where: { id: upstreamId } })\n      .then(upstream => {\n        const messages = [];\n        const newList = [];\n        list.forEach(x => {\n          if (x.upstreamId === upstreamId && x.routeId === routeId && x.senderId === senderId\n            && x.messageFlyId === messageFlyId) {\n            return messages.push(x);\n          }\n          return newList.push(x);\n        });\n        const data = JSON.parse(upstream.default);\n        const routeMap = JSON.parse(upstream.routeMap);\n        upstream.parameter.split(',').forEach(key => {\n          switch (key) {\n            case 'smsc': {\n              data[key] = routeMap[routeId];\n              break;\n            }\n            case 'to': {\n              data[key] = messages.map(x => x.number).join(upstream.joinKey);\n              break;\n            }\n            case 'from': {\n              data[key] = SenderIdName;\n              break;\n            }\n            case 'text': {\n              data[key] = text;\n              break;\n            }\n            case 'dlr-url': {\n              data[key] = `http://dlr.msgque.com/routesms/?dlr=%d&answer=%A&to=%p&ts=%T&smsID=${messageFlyId}`;\n              break;\n            }\n            default:\n          }\n        });\n        return rp({\n          method: 'GET',\n          uri: upstream.link,\n          qs: data,\n          json: true,\n        }).then(body => db.Message\n          .update({ messageStatusId: 4, comment: body, operatorOn: moment() }, {\n            where: { id: messages.map(x => x.id) },\n          }))\n          .then(() => SmsManager.processItem({ list: newList, reject }))\n          .catch(() => SmsManager.processItem({ list: newList, reject: true }));\n      });\n  },\n  processOperatorSelection({ list }) {\n    if (!list.length) return Promise.resolve();\n    const { routeId, messageFlyId } = list[0];\n    return db.Upstream\n      .findAll({ where: {\n        routeId: db.Sequelize.literal(`find_in_set('${routeId}',routeId) <> 0`),\n        balance: { $gt: 0 },\n      } })\n      .then((upstreams) => {\n        const upstreamMessageMap = {};\n        for (let i = 0; i < upstreams.length; i += 1) {\n          const upstream = upstreams[i];\n          if (upstream.balance >= list.length) {\n            upstreamMessageMap[upstream.id] = list.splice(0, list.length);\n            break;\n          }\n          upstreamMessageMap[upstream.id] = list.splice(0, upstream.balance);\n        }\n        upstreamMessageMap[0] = list;\n        return db.sequelize.transaction()\n          .then((transaction) => {\n            const promises = [\n              upstreamMessageMap[0].length\n                ? db.Message.update(\n                  { messageStatusId: 3 },\n                  { where: { id: upstreamMessageMap[0].map(x => x.id) } },\n                  { transaction })\n                : Promise.resolve(),\n            ];\n            delete upstreamMessageMap[0];\n            const messageIdAllocated = [];\n            promises.push(...Object.keys(upstreamMessageMap).map((upstreamId) => {\n              const id = upstreamMessageMap[upstreamId].map(x => x.id);\n              messageIdAllocated.push(...id);\n              const upstream = db.Upstream.build({ id: upstreamId });\n              return db.Message.update(\n                { messageStatusId: 2, upstreamId },\n                { where: { id } }, { transaction })\n                .then(() => upstream.decrement({ balance: id.length }, { transaction }))\n                .then(() => db.Transaction.create(\n                  {\n                    upstreamId,\n                    messageFlyId,\n                    count: upstreamMessageMap[upstreamId].map(x => x.id).length,\n                    transactionStatusId: 1,\n                  }, { transaction }));\n            }));\n            return Promise\n              .all(promises)\n              .then((data) => {\n                transaction.commit();\n                return db.Message.findAll({\n                  where: { id: messageIdAllocated },\n                  include: [db.Upstream, db.MessageFly, db.SenderId],\n                }).then(messages => SmsManager.processItem({ list: messages }))\n                  .then(() => Promise.resolve(data.splice(1, data.length)));\n              })\n              .then(transactions => db.Transaction.update(\n                { transactionStatusId: 2 },\n                { where: { id: transactions.map(x => x.id) } }))\n              .catch((err) => {\n                transaction.rollback();\n                return Promise.reject(err);\n              });\n          });\n      });\n  },\n  processUserMessages() {\n    if (SmsManager.messageFly.processing) return Promise.resolve();\n    const [messageFlyId, userId, routeId] = (SmsManager.messageFly.queue.shift() || '').split(':');\n    if (messageFlyId) {\n      SmsManager.messageFly.processing = true;\n      return db.Message\n        .findAll({\n          where: { userId, routeId, messageFlyId },\n        })\n        .then(list => SmsManager.processOperatorSelection({ list }))\n        .then(() => {\n          SmsManager.messageFly.processing = false;\n          SmsManager.processUserMessages();\n        })\n        .catch(() => {\n          SmsManager.messageFly.processing = false;\n          return SmsManager.processUserMessages();\n        });\n    }\n    return Promise.resolve();\n  },\n  startQueue() {\n    if (!SmsManager.messageFly.processing) SmsManager.processUserMessages();\n    return Promise.resolve();\n  },\n  addToSmsQueue(messages) {\n    messages.forEach(x => (SmsManager.messageFly.queue\n      .includes(`${x.messageFlyId}:${x.userId}:${x.routeId}`)\n      ? ''\n      : SmsManager.messageFly.queue.push(`${x.messageFlyId}:${x.userId}:${x.routeId}`)));\n    return SmsManager.startQueue();\n  },\n  addPendingMessagesToQueue() {\n    return Promise.all([\n      db.Message.findAll({\n        attributes: ['messageFlyId', 'routeId', 'userId'],\n        where: {\n          messageStatusId: [1],\n          send: 1,\n          createdAt: { $lte: moment().subtract(10, 'minute') },\n        },\n      }).then(messages => SmsManager.addToSmsQueue(messages)),\n      db.Transaction.findAll({\n        where: { transactionStatusId: 1, createdAt: { $lte: moment().subtract(10, 'minute') } },\n      }).then((transactions) => {\n        if (!transactions.length) return Promise.resolve();\n        return db.Message.findAll({\n          where: {\n            messageStatusId: 2,\n            messageFlyId: transactions.map(x => x.messageFlyId),\n            send: 1,\n            createdAt: { $lte: moment().subtract(10, 'minute') },\n          },\n          include: [db.Upstream, db.MessageFly, db.SenderId],\n        }).then(messages => SmsManager.processItem({ list: messages }))\n          .then(() => db.Transaction.update(\n            { transactionStatusId: 2 },\n            { where: { id: transactions.map(x => x.id) } }));\n      }),\n    ]).catch(err => logger.error('addPendingMessagesToQueue', err));\n  },\n  createBulkMessages({ list, messageFlyId, userId, senderId, routeId, campaignId, unicode,\n    flash, scheduledOn, send }) {\n    return db.Message.bulkCreate(list.map(number => ({ number,\n      messageFlyId,\n      messageStatusId: 1,\n      userId,\n      senderId,\n      routeId,\n      campaignId,\n      flash,\n      scheduledOn,\n      send,\n      unicode,\n    }))).then(messages => (send ? SmsManager.addToSmsQueue(messages) : Promise.resolve()));\n  },\n  /**\n   * @param statusId : created(0)\n   * @returns {Promise.<Array.<Instance>>}\n   */\n  addToScheduler({ list, messageTextId, userId, senderId, packageTypeId, messageTypeId, scheduledOn,\n    campaignId }) {\n    return db.ScheduleMessage.bulkCreate(list.map(number => ({\n      userId,\n      number,\n      messageTextId,\n      packageTypeId,\n      senderId,\n      messageTypeId,\n      scheduledOn,\n      messageStatusId: 1,\n      campaignId,\n    })));\n  },\n  canSendSms({ userId, resellerId, routeId, count }) {\n    if (!userId || !routeId) {\n      return Promise.reject({ message: 'Check Failed canSendSms.' });\n    }\n    const id = [userId];\n    if (resellerId) id.push(resellerId);\n    return db.User\n      .findAll({\n        where: { id },\n        attributes: ['id', 'roleId', `sellingBalance${getRouteType(routeId)}`,\n          `sendingBalance${getRouteType(routeId)}`] })\n      .then((users) => {\n        if (users.every((u) => {\n          const balanceField = `${u.roleId === 4 ? 'selling' : 'sending'\n          }Balance${getRouteType(routeId)}`;\n          return u[balanceField] >= count;\n        })) {\n          return Promise.resolve();\n        }\n        return Promise.reject({ message: 'Limit Exceeded', code: 404 });\n      });\n  },\n  /**\n   * @param text\n   * @param user\n   * @param routeId\n   * @param campaign\n   * @param numbers\n   * @param groupIds\n   * @param unicode\n   * @param flash\n   * @param senderId\n   * @param scheduledOn\n   * @returns {*}\n   */\n  sendSms({ text, user, routeId, campaign, numbers, groupIds, unicode, flash, senderId,\n    scheduledOn }) {\n    if (!text || !user) return Promise.reject({ message: 'Invalid request.' });\n    const { id: userId, resellerId } = user;\n    return Promise.all([\n      (groupIds\n        ? db.GroupContact.findAll({\n          where: { groupId: Number(groupIds) ? Number(groupIds) : groupIds.split(',').map(Number) },\n          include: [{ attributes: ['number'], model: db.Contact }],\n        }).then(data => data.map(x => x.Contact.number.substring(x.Contact.number.length - 10)))\n        : Promise.resolve([])),\n      (campaign\n        ? db.Campaign.findOrCreate({ where: { name: campaign, userId: user.id } })\n          .then(([x]) => x.id)\n        : Promise.resolve()),\n      SenderId.getSenderId(senderId, user.id),\n    ])\n      .then(([list, campaignId, senderIdObj]) => {\n        const { id, senderIdStatusId } = senderIdObj.toJSON();\n        if (numbers) list.push(...numbers.split(','));\n        if (senderIdStatusId === 3) {\n          return Promise.reject({ message: 'SenderId is blocked', code: 404 });\n        }\n        const send = senderIdStatusId === 2;\n        return SmsManager.canSendSms({ userId, resellerId, routeId, count: list.length })\n          .then(() => db.MessageFly.create({ text,\n            numbers,\n            groupIds,\n            total: list.length,\n            unicode,\n            flash,\n            userId,\n            scheduledOn,\n            campaignId,\n            routeId,\n            senderId: id,\n            send }))\n          .then(messageFly => SmsManager\n            .createBulkMessages({ list,\n              messageFlyId: messageFly.id,\n              userId: user.id,\n              senderId: id,\n              routeId,\n              campaignId,\n              unicode,\n              flash,\n              scheduledOn,\n              send,\n            }));\n      });\n  },\n};\n\nexport default SmsManager;\n"]}