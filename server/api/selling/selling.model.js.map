{"version":3,"sources":["api/selling/selling.model.js"],"names":["sequelize","DataTypes","Selling","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","limit","defaultValue","tableName","timestamps","paranoid","classMethods","associate","db","belongsTo","User","foreignKey","as","Route","hooks","afterCreate","instance","routeId","allocatedUser","build","userId","increment","fromUserId","allocatingUser","decrement"],"mappings":";;;;;;;;;;kBAEe,UAAUA,SAAV,EAAqBC,SAArB,EAAgC;AAC7C,MAAMC,UAAUF,UAAUG,MAAV,CAAiB,SAAjB,EAA4B;AAC1CC,QAAI;AACFC,YAAMJ,UAAUK,OADd;AAEFC,iBAAW,KAFT;AAGFC,kBAAY,IAHV;AAIFC,qBAAe;AAJb,KADsC;AAO1CC,WAAO;AACLL,YAAMJ,UAAUK,OADX;AAELK,oBAAc;AAFT;AAPmC,GAA5B,EAWb;AACDC,eAAW,SADV;AAEDC,gBAAY,IAFX;AAGDC,cAAU,IAHT;AAIDC,kBAAc;AACZC,eADY,qBACFC,EADE,EACE;AACZf,gBAAQe,EAAR,GAAaA,EAAb;AACAf,gBAAQgB,SAAR,CAAkBD,GAAGE,IAArB,EAA2B;AACzBC,sBAAY,WADa;AAEzBb,qBAAW,KAFc;AAGzBc,cAAI;AAHqB,SAA3B;AAKAnB,gBAAQgB,SAAR,CAAkBD,GAAGE,IAArB,EAA2B;AACzBC,sBAAY,WADa;AAEzBb,qBAAW,KAFc;AAGzBc,cAAI;AAHqB,SAA3B;AAKAnB,gBAAQgB,SAAR,CAAkBD,GAAGE,IAArB,EAA2B;AACzBC,sBAAY,eADa;AAEzBb,qBAAW,KAFc;AAGzBc,cAAI;AAHqB,SAA3B;AAKAnB,gBAAQgB,SAAR,CAAkBD,GAAGE,IAArB,EAA2B;AACzBC,sBAAY,YADa;AAEzBb,qBAAW,KAFc;AAGzBc,cAAI;AAHqB,SAA3B;AAKAnB,gBAAQgB,SAAR,CAAkBD,GAAGE,IAArB,EAA2B;AACzBC,sBAAY,QADa;AAEzBb,qBAAW,KAFc;AAGzBc,cAAI;AAHqB,SAA3B;AAKAnB,gBAAQgB,SAAR,CAAkBD,GAAGK,KAArB,EAA4B;AAC1BF,sBAAY,SADc;AAE1Bb,qBAAW;AAFe,SAA5B;AAID;AAhCW,KAJb;AAsCDgB,WAAO;AACLC,iBADK,uBACOC,QADP,EACiB;AACpB,YAAMR,KAAKf,QAAQe,EAAnB;AACA,YAAMZ,OAAO,0BAAaoB,SAASC,OAAtB,CAAb;AACA,YAAMC,gBAAgBV,GAAGE,IAAH,CAAQS,KAAR,CAAc,EAAExB,IAAIqB,SAASI,MAAf,EAAd,CAAtB;AACAF,sBAAcG,SAAd,sDAA4CzB,IAA5C,EAAqDoB,SAASf,KAA9D;AACA,YAAIe,SAASM,UAAb,EAAyB;AACvB,cAAMC,iBAAiBf,GAAGE,IAAH,CAAQS,KAAR,CAAc,EAAExB,IAAIqB,SAASM,UAAf,EAAd,CAAvB;AACAC,yBAAeC,SAAf,sDAA6C5B,IAA7C,EAAsDoB,SAASf,KAA/D;AACD;AACF;AAVI;AAtCN,GAXa,CAAhB;;AA+DA,SAAOR,OAAP;AACD,C;;AAnED","file":"selling.model.js","sourcesContent":["import { getRouteType } from '../../conn/sqldb/helper';\n\nexport default function (sequelize, DataTypes) {\n  const Selling = sequelize.define('Selling', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    limit: {\n      type: DataTypes.INTEGER,\n      defaultValue: 0,\n    },\n  }, {\n    tableName: 'selling',\n    timestamps: true,\n    paranoid: true,\n    classMethods: {\n      associate(db) {\n        Selling.db = db;\n        Selling.belongsTo(db.User, {\n          foreignKey: 'createdBy',\n          allowNull: false,\n          as: 'CreatedBy',\n        });\n        Selling.belongsTo(db.User, {\n          foreignKey: 'updatedBy',\n          allowNull: false,\n          as: 'UpdatedBy',\n        });\n        Selling.belongsTo(db.User, {\n          foreignKey: 'sendingUserId',\n          allowNull: false,\n          as: 'SendingUser',\n        });\n        Selling.belongsTo(db.User, {\n          foreignKey: 'fromUserId',\n          allowNull: false,\n          as: 'FromUser',\n        });\n        Selling.belongsTo(db.User, {\n          foreignKey: 'userId',\n          allowNull: false,\n          as: 'User',\n        });\n        Selling.belongsTo(db.Route, {\n          foreignKey: 'routeId',\n          allowNull: false,\n        });\n      },\n    },\n    hooks: {\n      afterCreate(instance) {\n        const db = Selling.db;\n        const type = getRouteType(instance.routeId);\n        const allocatedUser = db.User.build({ id: instance.userId });\n        allocatedUser.increment({ [`sellingBalance${type}`]: instance.limit });\n        if (instance.fromUserId) {\n          const allocatingUser = db.User.build({ id: instance.fromUserId });\n          allocatingUser.decrement({ [`sellingBalance${type}`]: instance.limit });\n        }\n      },\n    },\n  });\n\n  return Selling;\n}\n"]}