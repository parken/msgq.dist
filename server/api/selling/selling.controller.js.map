{"version":3,"sources":["api/selling/selling.controller.js"],"names":["index","create","req","res","next","query","limit","offset","fl","where","options","attributes","split","Number","include","model","Route","User","as","reduce","nxt","x","key","value","all","Selling","findAll","count","then","routes","numFound","json","items","meta","catch","body","createdBy","user","id","updatedBy","fromUserId","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAGgBA,K,GAAAA,K;QAuCAC,M,GAAAA,M;;AAzChB;;;;;;AAEO,SAASD,KAAT,CAAeE,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAAA,mBACUF,IAAIG,KADd;AAAA,oCAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,oCACpB,EADoB;AAAA,qCAChBC,MADgB;AAAA,MAChBA,MADgB,qCACP,CADO;AAAA,MACJC,EADI,cACJA,EADI;AAAA,MACAC,KADA,cACAA,KADA;;;AAGpC,MAAMC,UAAU;AACdC,gBAAYH,KAAKA,GAAGI,KAAH,CAAS,GAAT,CAAL,GAAqB,CAAC,IAAD,EAAO,SAAP,EAAkB,OAAlB,EAA2B,QAA3B,EAAqC,WAArC,CADnB;AAEdN,WAAOO,OAAOP,KAAP,CAFO;AAGdC,YAAQM,OAAON,MAAP,CAHM;AAIdO,aAAS,CAAC;AACRC,aAAO,gBAAGC,KADF;AAERL,kBAAY,CAAC,IAAD,EAAO,MAAP;AAFJ,KAAD,EAGN;AACDI,aAAO,gBAAGE,IADT;AAEDN,kBAAY,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,CAFX;AAGDO,UAAI;AAHH,KAHM,EAON;AACDH,aAAO,gBAAGE,IADT;AAEDN,kBAAY,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,CAFX;AAGDO,UAAI;AAHH,KAPM;AAJK,GAAhB;;AAkBA,MAAIT,KAAJ,EAAW;AACTC,YAAQD,KAAR,GAAgBA,MAAMG,KAAN,CAAY,GAAZ,EAAiBO,MAAjB,CAAwB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAAA,qBAC7BA,EAAET,KAAF,CAAQ,GAAR,CAD6B;AAAA;AAAA,UAC3CU,GAD2C;AAAA,UACtCC,KADsC;;AAElD,aAAO,sBAAcH,GAAd,oCAAsBE,GAAtB,EAA4BC,KAA5B,EAAP;AACD,KAHe,EAGb,EAHa,CAAhB;AAID;;AAED,SAAO,kBACJC,GADI,CACA,CACH,gBAAGC,OAAH,CACGC,OADH,CACWhB,OADX,CADG,EAGH,gBAAGe,OAAH,CACGE,KADH,EAHG,CADA,EAOJC,IAPI,CAOC;AAAA;AAAA,QAAEC,MAAF;AAAA,QAAUC,QAAV;;AAAA,WAAwB3B,IAAI4B,IAAJ,CAAS,EAAEC,OAAOH,MAAT,EAAiBI,MAAM,EAAEH,kBAAF,EAAvB,EAAT,CAAxB;AAAA,GAPD,EAQJI,KARI,CAQE9B,IARF,CAAP;AASD;;AAEM,SAASH,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrC,SAAO,gBAAGqB,OAAH,CACJxB,MADI,CACG,sBAAc,EAAd,EAAkBC,IAAIiC,IAAtB,EAA4B;AAClCC,eAAWlC,IAAImC,IAAJ,CAASC,EADc;AAElCC,eAAWrC,IAAImC,IAAJ,CAASC,EAFc;AAGlCE,gBAAYtC,IAAImC,IAAJ,CAASC;AAHa,GAA5B,CADH,EAMJV,IANI,CAMC;AAAA,QAAGU,EAAH,SAAGA,EAAH;AAAA,WAAYnC,IAAIsC,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB,EAAEO,MAAF,EAArB,CAAZ;AAAA,GAND,EAOJJ,KAPI,CAOE9B,IAPF,CAAP;AAQD","file":"selling.controller.js","sourcesContent":["\nimport db from '../../conn/sqldb/index';\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    attributes: fl ? fl.split(',') : ['id', 'routeId', 'limit', 'userId', 'createdAt'],\n    limit: Number(limit),\n    offset: Number(offset),\n    include: [{\n      model: db.Route,\n      attributes: ['id', 'name'],\n    }, {\n      model: db.User,\n      attributes: ['id', 'name', 'email'],\n      as: 'FromUser',\n    }, {\n      model: db.User,\n      attributes: ['id', 'name', 'email'],\n      as: 'User',\n    }],\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n\n  return Promise\n    .all([\n      db.Selling\n        .findAll(options),\n      db.Selling\n        .count(),\n    ])\n    .then(([routes, numFound]) => res.json({ items: routes, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  return db.Selling\n    .create(Object.assign({}, req.body, {\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n      fromUserId: req.user.id,\n    }))\n    .then(({ id }) => res.status(201).json({ id }))\n    .catch(next);\n}\n"]}