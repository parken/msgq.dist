{"version":3,"sources":["api/group/group.controller.js"],"names":["index","addEmailToGroup","show","create","update","destroy","ADMIN","req","res","next","user","roleId","Group","findAll","attributes","where","userId","id","then","GroupContact","sequelize","fn","groupId","groups","map","x","group","json","toJSON","contact","groupsContactCount","filter","y","count","catch","query","limit","offset","fl","options","split","Number","reduce","nxt","key","value","all","numFound","items","meta","find","name","params","status","message","GroupEmail","findOrCreate","email","end","console","log","err","findById","body"],"mappings":"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","file":"group.controller.js","sourcesContent":["\nimport db from '../../conn/sqldb';\n\nimport { ROLES } from '../../config/constants';\n\nconst { ADMIN } = ROLES;\n\nexport function index(req, res, next) {\n  if (req.user.roleId !== ADMIN) {\n    return db.Group\n      .findAll({\n        attributes: ['id', 'name'],\n        where: { userId: req.user.id },\n      })\n      .then(groups => db.GroupContact\n        .findAll({\n          attributes: ['groupId', [db.sequelize.fn('COUNT', 'contactId'), 'count']],\n          where: { groupId: groups.map(x => x.id) },\n          group: 'groupId',\n        }).then(groupsContactCount => res.json(groups.map((x) => {\n          const group = x.toJSON();\n          let contact = groupsContactCount.filter(y => (y.groupId === group.id))[0];\n          if (contact) contact = contact.toJSON();\n          else contact = { count: 0 };\n          group.count = contact.count;\n          return group;\n        }))))\n      .catch(next);\n  }\n\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    attributes: fl ? fl.split(',') : ['id', 'name'],\n    limit: Number(limit),\n    offset: Number(offset),\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n\n  return Promise\n    .all([\n      db.Group\n        .findAll(options),\n      db.Group\n        .count(),\n    ])\n    .then(([groups, numFound]) => res.json({ items: groups, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function addEmailToGroup(req, res, next) {\n  return db.Group.find({ where: { name: req.params.name } })\n    .then(group => {\n      if (!group) return res.status(500).json({ message: 'no group found.' });\n      return db.GroupEmail\n        .findOrCreate({ where: { groupId: group.id, email: req.params.email } })\n        .then(() => res.status(202).end());\n    }).catch(err => console.log(err));\n}\n\nexport function show(req, res, next) {\n  return db.Group\n    .findById(req.params.id)\n    .then(group => res.json(group))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  const { name } = req.body;\n  if (!name) return res.status(500).json({ message: 'Invalid request' });\n  return db.Group\n    .create(Object.assign({}, req.body, {\n      userId: req.user.id,\n    }))\n    .then(({ id }) => res.status(201).json({ id }))\n    .catch(next);\n}\n\nexport function update(req, res, next) {\n  return db.Group\n    .update(\n      Object.assign({}, req.body),\n      { where: { id: req.params.id, userId: req.user.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n\nexport function destroy(req, res, next) {\n  return db.Group\n    .destroy({ where: { id: req.params.id, userId: req.user.id } })\n    .then(() => res.status(201).end())\n    .catch(next);\n}\n"]}