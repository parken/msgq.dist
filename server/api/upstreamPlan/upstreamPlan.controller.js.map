{"version":3,"sources":["api/upstreamPlan/upstreamPlan.controller.js"],"names":["index","create","req","res","next","query","limit","offset","fl","where","options","attributes","split","Number","reduce","nxt","x","key","value","params","upstreamId","all","UpstreamPlan","findAll","count","then","upstreams","numFound","json","items","meta","catch","body","user","roleId","status","message","id","createdBy","updatedBy","end"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAGgBA,K,GAAAA,K;QA8BAC,M,GAAAA,M;;AAjChB;;;;AACA;;;;;;AAEO,SAASD,KAAT,CAAeE,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAAA,mBACUF,IAAIG,KADd;AAAA,oCAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,oCACpB,EADoB;AAAA,qCAChBC,MADgB;AAAA,MAChBA,MADgB,qCACP,CADO;AAAA,MACJC,EADI,cACJA,EADI;AAAA,MACAC,KADA,cACAA,KADA;;;AAGpC,MAAMC,UAAU;AACdD,WAAO,EADO;AAEdE,gBAAYH,KAAKA,GAAGI,KAAH,CAAS,GAAT,CAAL,GAAqB,CAAC,IAAD,EAAO,OAAP,CAFnB;AAGdN,WAAOO,OAAOP,KAAP,CAHO;AAIdC,YAAQM,OAAON,MAAP;AAJM,GAAhB;;AAOA,MAAIE,KAAJ,EAAW;AACTC,YAAQD,KAAR,GAAgBA,MAAMG,KAAN,CAAY,GAAZ,EAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAAA,qBAC7BA,EAAEJ,KAAF,CAAQ,GAAR,CAD6B;AAAA;AAAA,UAC3CK,GAD2C;AAAA,UACtCC,KADsC;;AAElD,aAAO,sBAAcH,GAAd,oCAAsBE,GAAtB,EAA4BC,KAA5B,EAAP;AACD,KAHe,EAGb,EAHa,CAAhB;AAID;;AAED,MAAIhB,IAAIiB,MAAJ,CAAWC,UAAf,EAA2BV,QAAQD,KAAR,CAAcW,UAAd,GAA2BlB,IAAIiB,MAAJ,CAAWC,UAAtC;;AAE3B,SAAO,kBACJC,GADI,CACA,CACH,gBAAGC,YAAH,CACGC,OADH,CACWb,OADX,CADG,EAGH,gBAAGY,YAAH,CACGE,KADH,EAHG,CADA,EAOJC,IAPI,CAOC;AAAA;AAAA,QAAEC,SAAF;AAAA,QAAaC,QAAb;;AAAA,WAA2BxB,IAAIyB,IAAJ,CAAS,EAAEC,OAAOH,SAAT,EAAoBI,MAAM,EAAEH,kBAAF,EAA1B,EAAT,CAA3B;AAAA,GAPD,EAQJI,KARI,CAQE3B,IARF,CAAP;AASD;;AAEM,SAASH,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AAAA,MAC7BoB,KAD6B,GACnBtB,IAAI8B,IADe,CAC7BR,KAD6B;;AAErC,MAAI,CAACA,KAAD,IAAUtB,IAAI+B,IAAJ,CAASC,MAAT,KAAoB,CAAlC,EAAqC,OAAO/B,IAAIgC,MAAJ,CAAW,GAAX,EAAgBP,IAAhB,CAAqB,EAAEQ,SAAS,iBAAX,EAArB,CAAP;AACrC,SAAO,gBAAGd,YAAH,CACJrB,MADI,CACG;AACNmB,gBAAYlB,IAAIiB,MAAJ,CAAWkB,EADjB;AAENC,eAAWpC,IAAI+B,IAAJ,CAASI,EAFd;AAGNE,eAAWrC,IAAI+B,IAAJ,CAASI,EAHd;AAINb;AAJM,GADH,EAOJC,IAPI,CAOC;AAAA,WAAMtB,IAAIgC,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,EAAN;AAAA,GAPD,EAQJT,KARI,CAQE3B,IARF,CAAP;AASD","file":"upstreamPlan.controller.js","sourcesContent":["import logger from '../../components/logger/index';\nimport db from '../../conn/sqldb/index';\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    where: {},\n    attributes: fl ? fl.split(',') : ['id', 'count'],\n    limit: Number(limit),\n    offset: Number(offset),\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n\n  if (req.params.upstreamId) options.where.upstreamId = req.params.upstreamId;\n\n  return Promise\n    .all([\n      db.UpstreamPlan\n        .findAll(options),\n      db.UpstreamPlan\n        .count(),\n    ])\n    .then(([upstreams, numFound]) => res.json({ items: upstreams, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function create(req, res, next) {\n  const { count } = req.body;\n  if (!count || req.user.roleId !== 1) return res.status(400).json({ message: 'Invalid Request' });\n  return db.UpstreamPlan\n    .create({\n      upstreamId: req.params.id,\n      createdBy: req.user.id,\n      updatedBy: req.user.id,\n      count,\n    })\n    .then(() => res.status(202).end())\n    .catch(next);\n}\n\n"]}