{"version":3,"sources":["api/message/message.controller.js"],"names":["index","show","req","res","next","query","limit","offset","fl","where","options","attributes","split","Number","reduce","nxt","x","key","value","params","messageFlyId","all","Message","findAll","count","then","routes","numFound","json","items","meta","catch","findById","id","route"],"mappings":";;;;;;;;;;;;;;;;;;;;;;QAEgBA,K,GAAAA,K;QA8BAC,I,GAAAA,I;;AAhChB;;;;;;AAEO,SAASD,KAAT,CAAeE,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAAA,mBACUF,IAAIG,KADd;AAAA,oCAC5BC,KAD4B;AAAA,MAC5BA,KAD4B,oCACpB,EADoB;AAAA,qCAChBC,MADgB;AAAA,MAChBA,MADgB,qCACP,CADO;AAAA,MACJC,EADI,cACJA,EADI;AAAA,MACAC,KADA,cACAA,KADA;;;AAGpC,MAAMC,UAAU;AACdD,WAAO,EADO;AAEdE,gBAAYH,KAAKA,GAAGI,KAAH,CAAS,GAAT,CAAL,GAAqB,CAAC,IAAD,EAAO,QAAP,CAFnB;AAGdN,WAAOO,OAAOP,KAAP,CAHO;AAIdC,YAAQM,OAAON,MAAP;AAJM,GAAhB;;AAOA,MAAIE,KAAJ,EAAW;AACTC,YAAQD,KAAR,GAAgBA,MAAMG,KAAN,CAAY,GAAZ,EAAiBE,MAAjB,CAAwB,UAACC,GAAD,EAAMC,CAAN,EAAY;AAAA,qBAC7BA,EAAEJ,KAAF,CAAQ,GAAR,CAD6B;AAAA;AAAA,UAC3CK,GAD2C;AAAA,UACtCC,KADsC;;AAElD,aAAO,sBAAcH,GAAd,oCAAsBE,GAAtB,EAA4BC,KAA5B,EAAP;AACD,KAHe,EAGb,EAHa,CAAhB;AAID;;AAED,MAAIhB,IAAIiB,MAAJ,CAAWC,YAAf,EAA6BV,QAAQD,KAAR,CAAcW,YAAd,GAA6BlB,IAAIiB,MAAJ,CAAWC,YAAxC;;AAE7B,SAAO,kBACJC,GADI,CACA,CACH,gBAAGC,OAAH,CACGC,OADH,CACWb,OADX,CADG,EAGH,gBAAGY,OAAH,CACGE,KADH,EAHG,CADA,EAOJC,IAPI,CAOC;AAAA;AAAA,QAAEC,MAAF;AAAA,QAAUC,QAAV;;AAAA,WAAwBxB,IAAIyB,IAAJ,CAAS,EAAEC,OAAOH,MAAT,EAAiBI,MAAM,EAAEH,kBAAF,EAAvB,EAAT,CAAxB;AAAA,GAPD,EAQJI,KARI,CAQE3B,IARF,CAAP;AASD;;AAEM,SAASH,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;AACnC,SAAO,gBAAGkB,OAAH,CACJU,QADI,CACK9B,IAAIiB,MAAJ,CAAWc,EADhB,EAEJR,IAFI,CAEC;AAAA,WAAStB,IAAIyB,IAAJ,CAASM,KAAT,CAAT;AAAA,GAFD,EAGJH,KAHI,CAGE3B,IAHF,CAAP;AAID","file":"message.controller.js","sourcesContent":["import db from '../../conn/sqldb/index';\n\nexport function index(req, res, next) {\n  const { limit = 20, offset = 0, fl, where } = req.query;\n\n  const options = {\n    where: {},\n    attributes: fl ? fl.split(',') : ['id', 'number'],\n    limit: Number(limit),\n    offset: Number(offset),\n  };\n\n  if (where) {\n    options.where = where.split(',').reduce((nxt, x) => {\n      const [key, value] = x.split(':');\n      return Object.assign(nxt, { [key]: value });\n    }, {});\n  }\n\n  if (req.params.messageFlyId) options.where.messageFlyId = req.params.messageFlyId;\n\n  return Promise\n    .all([\n      db.Message\n        .findAll(options),\n      db.Message\n        .count(),\n    ])\n    .then(([routes, numFound]) => res.json({ items: routes, meta: { numFound } }))\n    .catch(next);\n}\n\nexport function show(req, res, next) {\n  return db.Message\n    .findById(req.params.id)\n    .then(route => res.json(route))\n    .catch(next);\n}\n"]}