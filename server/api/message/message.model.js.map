{"version":3,"sources":["api/message/message.model.js"],"names":["sequelize","DataTypes","Message","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","number","STRING","unicode","BOOLEAN","flash","comment","scheduledOn","DATE","operatorOn","deliveredOn","send","defaultValue","tableName","timestamps","paranoid","classMethods","associate","db","belongsTo","User","foreignKey","MessageStatus","SenderId","Campaign","MessageFly","Route","Upstream","hooks","afterBulkCreate","instances","userId","routeId","find","attributes","where","then","resellerId","findAll","all","users","map","user","decrement","roleId","length","catch","err"],"mappings":"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","file":"message.model.js","sourcesContent":["\nimport logger from '../../components/logger';\nimport { getRouteType } from '../../conn/sqldb/helper';\n\nexport default function (sequelize, DataTypes) {\n  const Message = sequelize.define('Message', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    number: DataTypes.STRING,\n    unicode: DataTypes.BOOLEAN,\n    flash: DataTypes.BOOLEAN,\n    comment: DataTypes.STRING,\n    scheduledOn: DataTypes.DATE,\n    operatorOn: DataTypes.DATE,\n    deliveredOn: DataTypes.DATE,\n    send: { type: DataTypes.BOOLEAN, defaultValue: true },\n  }, {\n    tableName: 'messages',\n    timestamps: true,\n    paranoid: true,\n    classMethods: {\n      associate(db) {\n        Message.db = db;\n        Message.belongsTo(db.User, {\n          foreignKey: 'userId',\n          allowNull: false,\n        });\n        Message.belongsTo(db.MessageStatus, {\n          foreignKey: 'messageStatusId',\n          defaultValue: 0,\n          allowNull: false,\n        });\n        Message.belongsTo(db.SenderId, {\n          foreignKey: 'senderId',\n        });\n        Message.belongsTo(db.Campaign, {\n          foreignKey: 'campaignId',\n        });\n        Message.belongsTo(db.MessageFly, {\n          foreignKey: 'messageFlyId',\n        });\n        Message.belongsTo(db.Route, {\n          foreignKey: 'routeId',\n        });\n        Message.belongsTo(db.Upstream, {\n          foreignKey: 'upstreamId',\n        });\n      },\n    },\n    hooks: {\n      afterBulkCreate(instances) {\n        const { userId, routeId } = instances[0] || {};\n        if (!userId || !routeId) return;\n        Message.db.User.find({\n          attributes: ['resellerId'],\n          where: { id: userId },\n        }).then(({ resellerId }) => Message.db.User.findAll({\n          attributes: ['id', 'roleId', `sellingBalance${getRouteType(routeId)}`,\n            `sendingBalance${getRouteType(routeId)}`],\n          where: { id: [userId, resellerId] },\n        })).then(users => Promise.all([\n          users.map(user => user.decrement({ [`${user.roleId === 4 ? 'selling' : 'sending'\n          }Balance${getRouteType(routeId)}`]: instances.length })),\n        ]))\n          .catch(err => logger.err('message: afterBulkCreate', err));\n      },\n    },\n  });\n\n  return Message;\n}\n"]}