{"version":3,"sources":["api/domain/domain.model.js"],"names":["sequelize","DataTypes","Domain","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","name","STRING","status","classkey","price","existing","BOOLEAN","expiresAt","DATE","tableName","timestamps","paranoid","classMethods","associate","db","belongsTo","User","foreignKey","DomainType","hooks","afterCreate","instance","resolve","ownDomains","some","endsWith","x","all","s3","generateWebsite","register","then","domainPath","s3site","domain","createCNAME","slice","split","shift","data","url","substr","deploy"],"mappings":";;;;;;;;;;;;;;kBAEe,UAAUA,SAAV,EAAqBC,SAArB,EAAgC;AAC7C,MAAMC,SAASF,UAAUG,MAAV,CAAiB,QAAjB,EAA2B;AACxCC,QAAI;AACFC,YAAMJ,UAAUK,OADd;AAEFC,iBAAW,KAFT;AAGFC,kBAAY,IAHV;AAIFC,qBAAe;AAJb,KADoC;AAOxCC,UAAMT,UAAUU,MAPwB;AAQxCC,YAAQX,UAAUK,OARsB;AASxCO,cAAUZ,UAAUU,MAToB;AAUxCG,WAAOb,UAAUU,MAVuB;AAWxCI,cAAUd,UAAUe,OAXoB;AAYxCC,eAAW,EAAEZ,MAAMJ,UAAUiB,IAAlB;AAZ6B,GAA3B,EAaZ;AACDC,eAAW,SADV;AAEDC,gBAAY,IAFX;AAGDC,cAAU,IAHT;AAIDC,kBAAc;AACZC,eADY,qBACFC,EADE,EACE;AACZtB,eAAOuB,SAAP,CAAiBD,GAAGE,IAApB,EAA0B;AACxBC,sBAAY,QADY;AAExBpB,qBAAW;AAFa,SAA1B;AAIAL,eAAOuB,SAAP,CAAiBD,GAAGI,UAApB,EAAgC;AAC9BD,sBAAY,cADkB;AAE9BpB,qBAAW;AAFmB,SAAhC;AAID;AAVW,KAJb;AAgBDsB,WAAO;AACLC,iBADK,uBACOC,QADP,EACiB;AACpB,YAAIA,SAAShB,QAAb,EAAuB,OAAO,kBAAQiB,OAAR,EAAP;AACvB,YAAI,CAAC,kBAAQC,UAAR,CAAmBC,IAAnB,CAAwB;AAAA,iBAAKH,SAASrB,IAAT,CAAcyB,QAAd,CAAuBC,CAAvB,CAAL;AAAA,SAAxB,CAAL,EAA8D;AAC5D,iBAAO,kBAAQJ,OAAR,EAAP;AACD;AACD,eAAO,kBACJK,GADI,CACA,CACH,kBAAQC,EAAR,CAAWC,eAAX,CAA2BR,SAASrB,IAApC,CADG,EAEH,kBAAQ4B,EAAR,CAAWE,QAAX,CAAoBT,SAASrB,IAA7B,CAFG,CADA,EAKJ+B,IALI,CAKC;AAAA;AAAA,cAAEC,UAAF;AAAA,cAAcC,MAAd;;AAAA,iBAA0B,kBAC7BN,GAD6B,CACzB,CACH,kBAAQO,MAAR,CAAeC,WAAf,CAA2Bd,SAASrB,IAAT,CAAcoC,KAAd,CAAoB,CAAC,CAArB,CAA3B,EAAoD;AAClDpC,kBAAMqB,SAASrB,IAAT,CAAcqC,KAAd,CAAoB,GAApB,EAAyBC,KAAzB,EAD4C;AAElDC,kBAASN,OAAOO,GAAP,CAAWC,MAAX,CAAkB,CAAlB,CAAT;AAFkD,WAApD,CADG,EAKH,kBAAQb,EAAR,CAAWc,MAAX,CAAkBrB,SAASrB,IAA3B,CALG,CADyB,CAA1B;AAAA,SALD,CAAP;AAaD;AAnBI;AAhBN,GAbY,CAAf;;AAoDA,SAAOR,MAAP;AACD,C;;AAxDD","file":"domain.model.js","sourcesContent":["import Hosting from '../../components/hosting';\n\nexport default function (sequelize, DataTypes) {\n  const Domain = sequelize.define('Domain', {\n    id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true,\n    },\n    name: DataTypes.STRING,\n    status: DataTypes.INTEGER,\n    classkey: DataTypes.STRING,\n    price: DataTypes.STRING,\n    existing: DataTypes.BOOLEAN,\n    expiresAt: { type: DataTypes.DATE },\n  }, {\n    tableName: 'domains',\n    timestamps: true,\n    paranoid: true,\n    classMethods: {\n      associate(db) {\n        Domain.belongsTo(db.User, {\n          foreignKey: 'userId',\n          allowNull: false,\n        });\n        Domain.belongsTo(db.DomainType, {\n          foreignKey: 'domainTypeId',\n          allowNull: true,\n        });\n      },\n    },\n    hooks: {\n      afterCreate(instance) {\n        if (instance.existing) return Promise.resolve();\n        if (!Hosting.ownDomains.some(x => instance.name.endsWith(x))) {\n          return Promise.resolve();\n        }\n        return Promise\n          .all([\n            Hosting.s3.generateWebsite(instance.name),\n            Hosting.s3.register(instance.name),\n          ])\n          .then(([domainPath, s3site]) => Promise\n            .all([\n              Hosting.domain.createCNAME(instance.name.slice(-6), {\n                name: instance.name.split('.').shift(),\n                data: `${s3site.url.substr(7)}.`,\n              }),\n              Hosting.s3.deploy(instance.name),\n            ]));\n      },\n    },\n  });\n\n  return Domain;\n}\n"]}