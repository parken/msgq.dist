{"version":3,"sources":["config/express.js"],"names":["a","app","env","get","use","static","join","root","set","urlencoded","extended","json","r","res","next","req","headers","origin","split","routes","default","e","err","body","user","console","error","message","url","originalUrl","status","stack","webpackDevMiddleware","require","stripAnsi","webpack","makeWebpackConfig","webpackConfig","DEV","compiler","browserSync","create","init","open","logFileChanges","proxy","port","ws","middleware","noInfo","stats","colors","timings","chunks","browserSyncPort","plugins","plugin","log","hasErrors","hasWarnings","sockets","emit","title","toString","timeout","reload"],"mappings":"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","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\nimport debug from 'debug';\nimport cors from 'cors';\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\n\nimport config from './environment';\nimport * as routes from './../routes';\n\n\nconst log = debug('server/config');\n\n/* eslint consistent-return:0 */\nexport default function (a) {\n  const app = a;\n  const env = app.get('env');\n\n  if (env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if (env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(cors());\n  app.use(morgan('dev'));\n\n  app.set('views', `${config.root}/server/views`);\n  app.set('view engine', 'pug');\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use((r, res, next) => {\n    const req = r;\n    if (req.headers.origin) req.origin = req.headers.origin.split('://')[1];\n    next();\n  });\n  routes.default(app);\n  // errors passed using next(err)\n  app.use((e, req, res, next) => {\n    const err = e;\n    const { body, headers, user } = req;\n\n    console.error(err.message, err, {\n      url: req.originalUrl,\n      body,\n      headers,\n      user,\n    });\n\n    return res.status(500).json({ message: err.message, stack: err.stack });\n  });\n\n  if (env === 'development') {\n    /* eslint global-require:0 */\n    const webpackDevMiddleware = require('webpack-dev-middleware');\n    const stripAnsi = require('strip-ansi');\n    const webpack = require('webpack');\n    const makeWebpackConfig = require('../../webpack.make');\n    const webpackConfig = makeWebpackConfig({ DEV: true });\n    const compiler = webpack(webpackConfig);\n    const browserSync = require('browser-sync').create();\n\n    /**\n     * Run Browsersync and use middleware for Hot Module Replacement\n     */\n    browserSync.init({\n      open: false,\n      logFileChanges: false,\n      proxy: `localhost:${config.port}`,\n      ws: true,\n      middleware: [\n        webpackDevMiddleware(compiler, {\n          noInfo: false,\n          stats: {\n            colors: true,\n            timings: true,\n            chunks: false,\n          },\n        }),\n      ],\n      port: config.browserSyncPort,\n      plugins: ['bs-fullscreen-message'],\n    });\n\n    /**\n     * Reload all devices when bundle is complete\n     * or send a fullscreen error message to the browser instead\n     */\n    compiler.plugin('done', (stats) => {\n      log('webpack done hook');\n      if (stats.hasErrors() || stats.hasWarnings()) {\n        return browserSync.sockets.emit('fullscreen:message', {\n          title: 'Webpack Error:',\n          body: stripAnsi(stats.toString()),\n          timeout: 100000,\n        });\n      }\n      browserSync.reload();\n    });\n  }\n\n  if (env === 'development' || env === 'test') {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}