{"version":3,"sources":["config/socketio.js"],"names":["socketio","on","s","socket","request","connection","remoteAddress","remotePort","address","connectedAt","Date","log","data","nsp","name","onDisconnect","onConnect"],"mappings":";;;;;;;;;;kBAsBe,UAAUA,QAAV,EAAoB;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,WAASC,EAAT,CAAY,YAAZ,EAA0B,UAACC,CAAD,EAAO;AAC/B,QAAMC,SAASD,CAAf;AAD+B,gCAEOC,OAAOC,OAAP,CAAeC,UAFtB;AAAA,QAEvBC,aAFuB,yBAEvBA,aAFuB;AAAA,QAERC,UAFQ,yBAERA,UAFQ;;AAG/BJ,WAAOK,OAAP,GAAoBF,aAApB,SAAqCC,UAArC;;AAEAJ,WAAOM,WAAP,GAAqB,IAAIC,IAAJ,EAArB;;AAEAP,WAAOQ,GAAP,GAAa,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACxBD,0CAAgBR,OAAOU,GAAP,CAAWC,IAA3B,UAAoCX,OAAOK,OAA3C,eAA0DI,IAA1D;AACD,KAFD;;AAIA;AACAT,WAAOF,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC5Bc,mBAAaZ,MAAb;AACAA,aAAOQ,GAAP,CAAW,cAAX;AACD,KAHD;;AAKA;AACAK,cAAUb,MAAV;AACAA,WAAOQ,GAAP,CAAW,WAAX;AACD,GApBD;AAqBD,C;;AAzDD;;;;;;AAEA,IAAMA,MAAM,qBAAM,eAAN,CAAZ;AACA;;AAEA;AARA;;;AASA,SAASI,YAAT,GAAsB,WAAa,CAAE;;AAErC;AACA,SAASC,SAAT,CAAmBb,MAAnB,EAA2B;AACzB;AACAA,SAAOF,EAAP,CAAU,MAAV,EAAkB,UAACW,IAAD,EAAU;AAC1BT,WAAOQ,GAAP,CAAW,yBAAeC,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAX;AACD,GAFD;;AAIA;AACA;AACD","file":"socketio.js","sourcesContent":["/**\n * Socket.io configuration\n */\nimport debug from 'debug';\n\nconst log = debug('server/config');\n// import config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(/* socket*/) {}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', (data) => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  // require('../api/thing/thing.socket').register(socket);\n}\n\nexport default function (socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output,\n  // set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', (s) => {\n    const socket = s;\n    const { remoteAddress, remotePort } = socket.request.connection;\n    socket.address = `${remoteAddress}:${remotePort}`;\n\n    socket.connectedAt = new Date();\n\n    socket.log = (...data) => {\n      log(`SocketIO ${socket.nsp.name} [${socket.address}]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n  });\n}\n"]}