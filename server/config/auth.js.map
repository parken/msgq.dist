{"version":3,"sources":["config/auth.js"],"names":["authorise","logout","req","res","findOne","where","clientId","query","client_id","redirectUri","redirect_uri","attributes","then","model","status","json","error","catch","err","next","find","refreshToken","body","token","raw","s","sessionId","resolve"],"mappings":";;;;;;;;;;QAEgBA,S,GAAAA,S;QAgBAC,M,GAAAA,M;;AAlBhB;;;;;;AAEO,SAASD,SAAT,CAAmBE,GAAnB,EAAwBC,GAAxB,EAA6B;AAClC,SAAO,WACJC,OADI,CACI;AACPC,WAAO;AACLC,gBAAUJ,IAAIK,KAAJ,CAAUC,SADf;AAELC,mBAAaP,IAAIK,KAAJ,CAAUG;AAFlB,KADA;AAKPC,gBAAY,CAAC,IAAD,EAAO,MAAP;AALL,GADJ,EAQJC,IARI,CAQC,UAACC,KAAD,EAAW;AACf,QAAI,CAACA,KAAL,EAAY,OAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,gBAAT,EAArB,CAAP;AACZ,WAAOb,IAAIY,IAAJ,CAASF,KAAT,CAAP;AACD,GAXI,EAYJI,KAZI,CAYE;AAAA,WAAOd,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBG,GAArB,CAAP;AAAA,GAZF,CAAP;AAaD;;AAEM,SAASjB,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0BgB,IAA1B,EAAgC;AACrC,sBACGC,IADH,CACQ;AACJT,gBAAY,CAAC,WAAD,CADR;AAEJN,WAAO;AACLgB,oBAAcnB,IAAIoB,IAAJ,CAASC;AADlB,KAFH;AAKJC,SAAK;AALD,GADR,EAQGZ,IARH,CAQQ;AAAA,WAAMa,KAAKA,EAAEC,SAAP,GAAmB,eAAQzB,MAAR,kBAAmBwB,EAAEC,SAArB,CAAnB,GAAqD,kBAAQC,OAAR,EAA3D;AAAA,GARR,EASGf,IATH,CASQ;AAAA,WAAKT,IAAIY,IAAJ,CAASU,CAAT,CAAL;AAAA,GATR,EAUGR,KAVH,CAUSE,IAVT;AAWD","file":"auth.js","sourcesContent":["import db, { App, RefreshToken, Session } from '../conn/sqldb';\n\nexport function authorise(req, res) {\n  return App\n    .findOne({\n      where: {\n        clientId: req.query.client_id,\n        redirectUri: req.query.redirect_uri,\n      },\n      attributes: ['id', 'name'],\n    })\n    .then((model) => {\n      if (!model) return res.status(404).json({ error: 'Invalid Client' });\n      return res.json(model);\n    })\n    .catch(err => res.status(400).json(err));\n}\n\nexport function logout(req, res, next) {\n  RefreshToken\n    .find({\n      attributes: ['sessionId'],\n      where: {\n        refreshToken: req.body.token,\n      },\n      raw: true,\n    })\n    .then(s => (s && s.sessionId ? Session.logout(db, s.sessionId) : Promise.resolve()))\n    .then(s => res.json(s))\n    .catch(next);\n}\n"]}